schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  ethereum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  ethereum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  ethereum_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  ethereum_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  ethereum_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  ethereum_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  ethereum_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  ethereum_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ethereum_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  ethereum_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  ethereum_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  ethereum_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  ethereum_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  ethereum_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  ethereum_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  ethereum_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  ethereum_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  ethereum_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  ethereum_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  ethereum_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  ethereum_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  ethereum_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  ethereum_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  ethereum_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  ethereum_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  ethereum_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  ethereum_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  ethereum_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  ethereum_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  ethereum_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  ethereum_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  ethereum_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  ethereum_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  ethereum_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  ethereum_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  ethereum_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  ethereum_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  ethereum_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  ethereum_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  ethereum_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  ethereum_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  ethereum_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  ethereum_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  ethereum_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  ethereum_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  ethereum_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  ethereum__meta(block: Block_height): _Meta_
  meta_street_ethereum_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  meta_street_ethereum_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  meta_street_ethereum_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  meta_street_ethereum_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  meta_street_ethereum_collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  meta_street_ethereum_collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  meta_street_ethereum_currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  meta_street_ethereum_currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  meta_street_ethereum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  meta_street_ethereum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  meta_street_ethereum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  meta_street_ethereum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  meta_street_ethereum_redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  meta_street_ethereum_redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  meta_street_ethereum_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  meta_street_ethereum_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  meta_street_ethereum_batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  meta_street_ethereum_batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  meta_street_ethereum_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  meta_street_ethereum_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  meta_street_ethereum_poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  meta_street_ethereum_poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  meta_street_ethereum_loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  meta_street_ethereum_loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  meta_street_ethereum_loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  meta_street_ethereum_loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  meta_street_ethereum_loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  meta_street_ethereum_loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  meta_street_ethereum_collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  meta_street_ethereum_collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  meta_street_ethereum_deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  meta_street_ethereum_depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  meta_street_ethereum_redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  meta_street_ethereum_redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  meta_street_ethereum_withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  meta_street_ethereum_withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  meta_street_ethereum_tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  meta_street_ethereum_tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  meta_street_ethereum_transferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transferred
  meta_street_ethereum_transferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: Transferred_orderBy
    orderDirection: OrderDirection
    where: Transferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transferred!]!
  meta_street_ethereum_liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  meta_street_ethereum_liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  meta_street_ethereum_auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  meta_street_ethereum_auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  meta_street_ethereum_bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  meta_street_ethereum_bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  meta_street_ethereum__meta(block: Block_height): _Meta_
  sepolia_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  sepolia_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  sepolia_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  sepolia_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  sepolia_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  sepolia_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  sepolia_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  sepolia_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  sepolia_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  sepolia_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  sepolia_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  sepolia_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  sepolia_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  sepolia_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  sepolia_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  sepolia_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  sepolia_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  sepolia_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  sepolia_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  sepolia_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  sepolia_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  sepolia_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  sepolia_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  sepolia_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  sepolia_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  sepolia_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  sepolia_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  sepolia_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  sepolia_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  sepolia_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  sepolia_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  sepolia_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  sepolia_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  sepolia_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  sepolia_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  sepolia_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  sepolia_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  sepolia_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  sepolia_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  sepolia_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  sepolia_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  sepolia_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  sepolia_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  sepolia_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  sepolia__meta(block: Block_height): _Meta_
  meta_street_sepolia_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  meta_street_sepolia_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  meta_street_sepolia_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  meta_street_sepolia_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  meta_street_sepolia_collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  meta_street_sepolia_collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  meta_street_sepolia_currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  meta_street_sepolia_currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  meta_street_sepolia_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  meta_street_sepolia_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  meta_street_sepolia_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  meta_street_sepolia_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  meta_street_sepolia_redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  meta_street_sepolia_redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  meta_street_sepolia_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  meta_street_sepolia_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  meta_street_sepolia_batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  meta_street_sepolia_batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  meta_street_sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  meta_street_sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  meta_street_sepolia_poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  meta_street_sepolia_poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  meta_street_sepolia_loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  meta_street_sepolia_loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  meta_street_sepolia_loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  meta_street_sepolia_loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  meta_street_sepolia_loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  meta_street_sepolia_loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  meta_street_sepolia_collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  meta_street_sepolia_collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  meta_street_sepolia_deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  meta_street_sepolia_depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  meta_street_sepolia_redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  meta_street_sepolia_redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  meta_street_sepolia_withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  meta_street_sepolia_withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  meta_street_sepolia_tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  meta_street_sepolia_tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  meta_street_sepolia_transferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transferred
  meta_street_sepolia_transferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: Transferred_orderBy
    orderDirection: OrderDirection
    where: Transferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transferred!]!
  meta_street_sepolia_liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  meta_street_sepolia_liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  meta_street_sepolia_auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  meta_street_sepolia_auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  meta_street_sepolia_bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  meta_street_sepolia_bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  meta_street_sepolia__meta(block: Block_height): _Meta_
  base_sepolia_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  base_sepolia_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  base_sepolia_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  base_sepolia_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  base_sepolia_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  base_sepolia_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  base_sepolia_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  base_sepolia_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  base_sepolia_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  base_sepolia_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  base_sepolia_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  base_sepolia_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  base_sepolia_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  base_sepolia_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  base_sepolia_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  base_sepolia_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  base_sepolia_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  base_sepolia_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  base_sepolia_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  base_sepolia_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  base_sepolia_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  base_sepolia_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  base_sepolia_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  base_sepolia_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  base_sepolia_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  base_sepolia_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  base_sepolia_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  base_sepolia_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  base_sepolia_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  base_sepolia_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  base_sepolia_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  base_sepolia_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  base_sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  base_sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  base_sepolia_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  base_sepolia_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  base_sepolia_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  base_sepolia_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  base_sepolia_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  base_sepolia_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  base_sepolia_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  base_sepolia_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  base_sepolia_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  base_sepolia_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  base_sepolia_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  base_sepolia_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  base_sepolia__meta(block: Block_height): _Meta_
}

type Subscription {
  ethereum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  ethereum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  ethereum_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  ethereum_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  ethereum_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  ethereum_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  ethereum_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  ethereum_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  ethereum_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  ethereum_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  ethereum_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  ethereum_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  ethereum_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  ethereum_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  ethereum_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  ethereum_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  ethereum_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  ethereum_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  ethereum_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  ethereum_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  ethereum_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  ethereum_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  ethereum_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  ethereum_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  ethereum_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  ethereum_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  ethereum_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  ethereum_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  ethereum_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  ethereum_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  ethereum_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  ethereum_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  ethereum_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  ethereum_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  ethereum_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  ethereum_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  ethereum_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  ethereum_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  ethereum_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  ethereum_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  ethereum_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  ethereum_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  ethereum_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  ethereum_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  ethereum_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  ethereum_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  ethereum__meta(block: Block_height): _Meta_
  meta_street_ethereum_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  meta_street_ethereum_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  meta_street_ethereum_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  meta_street_ethereum_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  meta_street_ethereum_collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  meta_street_ethereum_collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  meta_street_ethereum_currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  meta_street_ethereum_currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  meta_street_ethereum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  meta_street_ethereum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  meta_street_ethereum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  meta_street_ethereum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  meta_street_ethereum_redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  meta_street_ethereum_redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  meta_street_ethereum_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  meta_street_ethereum_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  meta_street_ethereum_batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  meta_street_ethereum_batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  meta_street_ethereum_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  meta_street_ethereum_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  meta_street_ethereum_poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  meta_street_ethereum_poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  meta_street_ethereum_loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  meta_street_ethereum_loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  meta_street_ethereum_loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  meta_street_ethereum_loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  meta_street_ethereum_loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  meta_street_ethereum_loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  meta_street_ethereum_collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  meta_street_ethereum_collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  meta_street_ethereum_deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  meta_street_ethereum_depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  meta_street_ethereum_redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  meta_street_ethereum_redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  meta_street_ethereum_withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  meta_street_ethereum_withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  meta_street_ethereum_tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  meta_street_ethereum_tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  meta_street_ethereum_transferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transferred
  meta_street_ethereum_transferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: Transferred_orderBy
    orderDirection: OrderDirection
    where: Transferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transferred!]!
  meta_street_ethereum_liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  meta_street_ethereum_liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  meta_street_ethereum_auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  meta_street_ethereum_auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  meta_street_ethereum_bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  meta_street_ethereum_bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  meta_street_ethereum__meta(block: Block_height): _Meta_
  sepolia_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  sepolia_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  sepolia_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  sepolia_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  sepolia_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  sepolia_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  sepolia_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  sepolia_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  sepolia_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  sepolia_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  sepolia_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  sepolia_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  sepolia_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  sepolia_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  sepolia_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  sepolia_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  sepolia_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  sepolia_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  sepolia_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  sepolia_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  sepolia_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  sepolia_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  sepolia_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  sepolia_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  sepolia_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  sepolia_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  sepolia_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  sepolia_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  sepolia_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  sepolia_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  sepolia_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  sepolia_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  sepolia_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  sepolia_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  sepolia_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  sepolia_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  sepolia_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  sepolia_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  sepolia_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  sepolia_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  sepolia_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  sepolia_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  sepolia_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  sepolia_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  sepolia__meta(block: Block_height): _Meta_
  meta_street_sepolia_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  meta_street_sepolia_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  meta_street_sepolia_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  meta_street_sepolia_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  meta_street_sepolia_collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  meta_street_sepolia_collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  meta_street_sepolia_currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  meta_street_sepolia_currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  meta_street_sepolia_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  meta_street_sepolia_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  meta_street_sepolia_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  meta_street_sepolia_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  meta_street_sepolia_redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  meta_street_sepolia_redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  meta_street_sepolia_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  meta_street_sepolia_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  meta_street_sepolia_batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  meta_street_sepolia_batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  meta_street_sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  meta_street_sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  meta_street_sepolia_poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  meta_street_sepolia_poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  meta_street_sepolia_loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  meta_street_sepolia_loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  meta_street_sepolia_loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  meta_street_sepolia_loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  meta_street_sepolia_loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  meta_street_sepolia_loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  meta_street_sepolia_collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  meta_street_sepolia_collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  meta_street_sepolia_deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  meta_street_sepolia_depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  meta_street_sepolia_redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  meta_street_sepolia_redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  meta_street_sepolia_withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  meta_street_sepolia_withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  meta_street_sepolia_tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  meta_street_sepolia_tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  meta_street_sepolia_transferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transferred
  meta_street_sepolia_transferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: Transferred_orderBy
    orderDirection: OrderDirection
    where: Transferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transferred!]!
  meta_street_sepolia_liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  meta_street_sepolia_liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  meta_street_sepolia_auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  meta_street_sepolia_auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  meta_street_sepolia_bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  meta_street_sepolia_bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  meta_street_sepolia__meta(block: Block_height): _Meta_
  base_sepolia_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  base_sepolia_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  base_sepolia_balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  base_sepolia_balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  base_sepolia_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  base_sepolia_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  base_sepolia_transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  base_sepolia_transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  base_sepolia_configurationUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ConfigurationUpdate
  base_sepolia_configurationUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ConfigurationUpdate_orderBy
    orderDirection: OrderDirection
    where: ConfigurationUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ConfigurationUpdate!]!
  base_sepolia_operatingAgreementUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatingAgreementUpdate
  base_sepolia_operatingAgreementUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatingAgreementUpdate_orderBy
    orderDirection: OrderDirection
    where: OperatingAgreementUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatingAgreementUpdate!]!
  base_sepolia_validatorUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ValidatorUpdate
  base_sepolia_validatorUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: ValidatorUpdate_orderBy
    orderDirection: OrderDirection
    where: ValidatorUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ValidatorUpdate!]!
  base_sepolia_traitMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadata
  base_sepolia_traitMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadata_orderBy
    orderDirection: OrderDirection
    where: TraitMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadata!]!
  base_sepolia_traitMetadataUriUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitMetadataUriUpdate
  base_sepolia_traitMetadataUriUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitMetadataUriUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitMetadataUriUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitMetadataUriUpdate!]!
  base_sepolia_traitDefinition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDefinition
  base_sepolia_traitDefinitions(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDefinition_orderBy
    orderDirection: OrderDirection
    where: TraitDefinition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDefinition!]!
  base_sepolia_traitStringUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitStringUpdate
  base_sepolia_traitStringUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitStringUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitStringUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitStringUpdate!]!
  base_sepolia_traitDecimalUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimalUpdate
  base_sepolia_traitDecimalUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimalUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitDecimalUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimalUpdate!]!
  base_sepolia_traitBooleanUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBooleanUpdate
  base_sepolia_traitBooleanUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBooleanUpdate_orderBy
    orderDirection: OrderDirection
    where: TraitBooleanUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBooleanUpdate!]!
  base_sepolia_traitString(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitString
  base_sepolia_traitStrings(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitString_orderBy
    orderDirection: OrderDirection
    where: TraitString_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitString!]!
  base_sepolia_traitDecimal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitDecimal
  base_sepolia_traitDecimals(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitDecimal_orderBy
    orderDirection: OrderDirection
    where: TraitDecimal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitDecimal!]!
  base_sepolia_traitBoolean(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraitBoolean
  base_sepolia_traitBooleans(
    skip: Int = 0
    first: Int = 100
    orderBy: TraitBoolean_orderBy
    orderDirection: OrderDirection
    where: TraitBoolean_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TraitBoolean!]!
  base_sepolia_loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  base_sepolia_loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  base_sepolia_loanLiquidatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidatedEvent
  base_sepolia_loanLiquidatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidatedEvent!]!
  base_sepolia_loanRenegotiatedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRenegotiatedEvent
  base_sepolia_loanRenegotiatedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRenegotiatedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRenegotiatedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRenegotiatedEvent!]!
  base_sepolia_loanRepaidEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaidEvent
  base_sepolia_loanRepaidEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaidEvent_orderBy
    orderDirection: OrderDirection
    where: LoanRepaidEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaidEvent!]!
  base_sepolia_loanStartedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStartedEvent
  base_sepolia_loanStartedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanStartedEvent_orderBy
    orderDirection: OrderDirection
    where: LoanStartedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanStartedEvent!]!
  base_sepolia_obligationReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ObligationReceipt
  base_sepolia_obligationReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: ObligationReceipt_orderBy
    orderDirection: OrderDirection
    where: ObligationReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ObligationReceipt!]!
  base_sepolia_promissoryNote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PromissoryNote
  base_sepolia_promissoryNotes(
    skip: Int = 0
    first: Int = 100
    orderBy: PromissoryNote_orderBy
    orderDirection: OrderDirection
    where: PromissoryNote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PromissoryNote!]!
  """Access to subgraph metadata"""
  base_sepolia__meta(block: Block_height): _Meta_
}

enum Aggregation_interval {
  hour
  day
}

type Balance {
  id: Bytes!
  token: Token!
  owner: User!
  holder: User!
  balance: BigInt!
}

input Balance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: User_filter
  holder: String
  holder_not: String
  holder_gt: String
  holder_lt: String
  holder_gte: String
  holder_lte: String
  holder_in: [String!]
  holder_not_in: [String!]
  holder_contains: String
  holder_contains_nocase: String
  holder_not_contains: String
  holder_not_contains_nocase: String
  holder_starts_with: String
  holder_starts_with_nocase: String
  holder_not_starts_with: String
  holder_not_starts_with_nocase: String
  holder_ends_with: String
  holder_ends_with_nocase: String
  holder_not_ends_with: String
  holder_not_ends_with_nocase: String
  holder_: User_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Balance_filter]
  or: [Balance_filter]
}

enum Balance_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  owner
  owner__id
  owner__address
  owner__tokenCount
  holder
  holder__id
  holder__address
  holder__tokenCount
  balance
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ConfigurationUpdate {
  id: Bytes!
  token: Token!
  newValue: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ConfigurationUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  newValue: String
  newValue_not: String
  newValue_gt: String
  newValue_lt: String
  newValue_gte: String
  newValue_lte: String
  newValue_in: [String!]
  newValue_not_in: [String!]
  newValue_contains: String
  newValue_contains_nocase: String
  newValue_not_contains: String
  newValue_not_contains_nocase: String
  newValue_starts_with: String
  newValue_starts_with_nocase: String
  newValue_not_starts_with: String
  newValue_not_starts_with_nocase: String
  newValue_ends_with: String
  newValue_ends_with_nocase: String
  newValue_not_ends_with: String
  newValue_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ConfigurationUpdate_filter]
  or: [ConfigurationUpdate_filter]
}

enum ConfigurationUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

type Loan {
  id: Bytes!
  loanProvider: String!
  loanContract: Bytes!
  loanId: BigInt!
  loanStatus: LoanStatus!
  borrower: User!
  lender: User
  loanPrincipalAmount: BigInt!
  maximumRepaymentAmount: BigInt!
  nftCollateralId: BigInt!
  loanERC20Denomination: Bytes!
  loanDuration: BigInt!
  loanInterestRateForDurationInBasisPoints: Int!
  loanAdminFeeInBasisPoints: Int!
  nftCollateralWrapper: Bytes!
  loanStartTime: BigInt!
  nftCollateralContract: Bytes!
  revenueSharePartner: Bytes!
  revenueShareInBasisPoints: Int!
  referralFeeInBasisPoints: Int!
  loanMaturityDate: BigInt
  loanLiquidationDate: BigInt
  totalRenegotiationFeesPaid: BigInt!
  totalRenegotiationAdminFeesPaid: BigInt!
  amountPaidToLender: BigInt
  adminFeePaid: BigInt
  revenueSharePaid: BigInt
  encodedLoanReceipt: Bytes
  obligationReceipt: ObligationReceipt
  promissoryNotes(skip: Int = 0, first: Int = 100, orderBy: PromissoryNote_orderBy, orderDirection: OrderDirection, where: PromissoryNote_filter): [PromissoryNote!]
  pool: Pool!
  status: LoanStatus!
  transactionHash: Bytes!
  completionTransactionHash: Bytes
  timestamp: BigInt!
  completion: BigInt
  bundle: Bundle
  batch: Batch
  delegate: Bytes
  delegateV2: Bytes
  maturity: BigInt!
  duration: BigInt!
  collateralToken: CollateralToken!
  collateralTokenIds: [BigInt!]!
  collateralWrapperToken: Bytes
  collateralWrapperTokenId: BigInt
  ticks: [BigInt!]!
  useds: [BigInt!]!
  interests: [BigInt!]!
  principal: BigInt!
  repayment: BigInt!
  adminFee: BigInt!
  proceeds: BigInt
  collateralWrapperContext: Bytes!
  loanReceipt: Bytes!
}

type LoanLiquidatedEvent {
  id: Bytes!
  loan: Loan!
  borrower: User!
  lender: User
  loanPrincipalAmount: BigInt!
  nftCollateralId: BigInt!
  loanMaturityDate: BigInt!
  loanLiquidationDate: BigInt!
  nftCollateralContract: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input LoanLiquidatedEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  borrower: String
  borrower_not: String
  borrower_gt: String
  borrower_lt: String
  borrower_gte: String
  borrower_lte: String
  borrower_in: [String!]
  borrower_not_in: [String!]
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_: User_filter
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_: User_filter
  loanPrincipalAmount: BigInt
  loanPrincipalAmount_not: BigInt
  loanPrincipalAmount_gt: BigInt
  loanPrincipalAmount_lt: BigInt
  loanPrincipalAmount_gte: BigInt
  loanPrincipalAmount_lte: BigInt
  loanPrincipalAmount_in: [BigInt!]
  loanPrincipalAmount_not_in: [BigInt!]
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  loanMaturityDate: BigInt
  loanMaturityDate_not: BigInt
  loanMaturityDate_gt: BigInt
  loanMaturityDate_lt: BigInt
  loanMaturityDate_gte: BigInt
  loanMaturityDate_lte: BigInt
  loanMaturityDate_in: [BigInt!]
  loanMaturityDate_not_in: [BigInt!]
  loanLiquidationDate: BigInt
  loanLiquidationDate_not: BigInt
  loanLiquidationDate_gt: BigInt
  loanLiquidationDate_lt: BigInt
  loanLiquidationDate_gte: BigInt
  loanLiquidationDate_lte: BigInt
  loanLiquidationDate_in: [BigInt!]
  loanLiquidationDate_not_in: [BigInt!]
  nftCollateralContract: Bytes
  nftCollateralContract_not: Bytes
  nftCollateralContract_gt: Bytes
  nftCollateralContract_lt: Bytes
  nftCollateralContract_gte: Bytes
  nftCollateralContract_lte: Bytes
  nftCollateralContract_in: [Bytes!]
  nftCollateralContract_not_in: [Bytes!]
  nftCollateralContract_contains: Bytes
  nftCollateralContract_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanLiquidatedEvent_filter]
  or: [LoanLiquidatedEvent_filter]
}

enum LoanLiquidatedEvent_orderBy {
  id
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  borrower
  borrower__id
  borrower__address
  borrower__tokenCount
  lender
  lender__id
  lender__address
  lender__tokenCount
  loanPrincipalAmount
  nftCollateralId
  loanMaturityDate
  loanLiquidationDate
  nftCollateralContract
  blockNumber
  blockTimestamp
  transactionHash
}

type LoanRenegotiatedEvent {
  id: Bytes!
  loan: Loan!
  borrower: User!
  lender: User
  newLoanDuration: BigInt!
  newMaximumRepaymentAmount: BigInt!
  renegotiationFee: BigInt!
  renegotiationAdminFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input LoanRenegotiatedEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  borrower: String
  borrower_not: String
  borrower_gt: String
  borrower_lt: String
  borrower_gte: String
  borrower_lte: String
  borrower_in: [String!]
  borrower_not_in: [String!]
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_: User_filter
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_: User_filter
  newLoanDuration: BigInt
  newLoanDuration_not: BigInt
  newLoanDuration_gt: BigInt
  newLoanDuration_lt: BigInt
  newLoanDuration_gte: BigInt
  newLoanDuration_lte: BigInt
  newLoanDuration_in: [BigInt!]
  newLoanDuration_not_in: [BigInt!]
  newMaximumRepaymentAmount: BigInt
  newMaximumRepaymentAmount_not: BigInt
  newMaximumRepaymentAmount_gt: BigInt
  newMaximumRepaymentAmount_lt: BigInt
  newMaximumRepaymentAmount_gte: BigInt
  newMaximumRepaymentAmount_lte: BigInt
  newMaximumRepaymentAmount_in: [BigInt!]
  newMaximumRepaymentAmount_not_in: [BigInt!]
  renegotiationFee: BigInt
  renegotiationFee_not: BigInt
  renegotiationFee_gt: BigInt
  renegotiationFee_lt: BigInt
  renegotiationFee_gte: BigInt
  renegotiationFee_lte: BigInt
  renegotiationFee_in: [BigInt!]
  renegotiationFee_not_in: [BigInt!]
  renegotiationAdminFee: BigInt
  renegotiationAdminFee_not: BigInt
  renegotiationAdminFee_gt: BigInt
  renegotiationAdminFee_lt: BigInt
  renegotiationAdminFee_gte: BigInt
  renegotiationAdminFee_lte: BigInt
  renegotiationAdminFee_in: [BigInt!]
  renegotiationAdminFee_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanRenegotiatedEvent_filter]
  or: [LoanRenegotiatedEvent_filter]
}

enum LoanRenegotiatedEvent_orderBy {
  id
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  borrower
  borrower__id
  borrower__address
  borrower__tokenCount
  lender
  lender__id
  lender__address
  lender__tokenCount
  newLoanDuration
  newMaximumRepaymentAmount
  renegotiationFee
  renegotiationAdminFee
  blockNumber
  blockTimestamp
  transactionHash
}

type LoanRepaidEvent {
  id: Bytes!
  loan: Loan!
  borrower: User!
  lender: User
  loanPrincipalAmount: BigInt!
  nftCollateralId: BigInt!
  amountPaidToLender: BigInt!
  adminFee: BigInt!
  revenueShare: BigInt!
  revenueSharePartner: Bytes!
  nftCollateralContract: Bytes!
  loanERC20Denomination: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input LoanRepaidEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  borrower: String
  borrower_not: String
  borrower_gt: String
  borrower_lt: String
  borrower_gte: String
  borrower_lte: String
  borrower_in: [String!]
  borrower_not_in: [String!]
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_: User_filter
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_: User_filter
  loanPrincipalAmount: BigInt
  loanPrincipalAmount_not: BigInt
  loanPrincipalAmount_gt: BigInt
  loanPrincipalAmount_lt: BigInt
  loanPrincipalAmount_gte: BigInt
  loanPrincipalAmount_lte: BigInt
  loanPrincipalAmount_in: [BigInt!]
  loanPrincipalAmount_not_in: [BigInt!]
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  amountPaidToLender: BigInt
  amountPaidToLender_not: BigInt
  amountPaidToLender_gt: BigInt
  amountPaidToLender_lt: BigInt
  amountPaidToLender_gte: BigInt
  amountPaidToLender_lte: BigInt
  amountPaidToLender_in: [BigInt!]
  amountPaidToLender_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  revenueShare: BigInt
  revenueShare_not: BigInt
  revenueShare_gt: BigInt
  revenueShare_lt: BigInt
  revenueShare_gte: BigInt
  revenueShare_lte: BigInt
  revenueShare_in: [BigInt!]
  revenueShare_not_in: [BigInt!]
  revenueSharePartner: Bytes
  revenueSharePartner_not: Bytes
  revenueSharePartner_gt: Bytes
  revenueSharePartner_lt: Bytes
  revenueSharePartner_gte: Bytes
  revenueSharePartner_lte: Bytes
  revenueSharePartner_in: [Bytes!]
  revenueSharePartner_not_in: [Bytes!]
  revenueSharePartner_contains: Bytes
  revenueSharePartner_not_contains: Bytes
  nftCollateralContract: Bytes
  nftCollateralContract_not: Bytes
  nftCollateralContract_gt: Bytes
  nftCollateralContract_lt: Bytes
  nftCollateralContract_gte: Bytes
  nftCollateralContract_lte: Bytes
  nftCollateralContract_in: [Bytes!]
  nftCollateralContract_not_in: [Bytes!]
  nftCollateralContract_contains: Bytes
  nftCollateralContract_not_contains: Bytes
  loanERC20Denomination: Bytes
  loanERC20Denomination_not: Bytes
  loanERC20Denomination_gt: Bytes
  loanERC20Denomination_lt: Bytes
  loanERC20Denomination_gte: Bytes
  loanERC20Denomination_lte: Bytes
  loanERC20Denomination_in: [Bytes!]
  loanERC20Denomination_not_in: [Bytes!]
  loanERC20Denomination_contains: Bytes
  loanERC20Denomination_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanRepaidEvent_filter]
  or: [LoanRepaidEvent_filter]
}

enum LoanRepaidEvent_orderBy {
  id
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  borrower
  borrower__id
  borrower__address
  borrower__tokenCount
  lender
  lender__id
  lender__address
  lender__tokenCount
  loanPrincipalAmount
  nftCollateralId
  amountPaidToLender
  adminFee
  revenueShare
  revenueSharePartner
  nftCollateralContract
  loanERC20Denomination
  blockNumber
  blockTimestamp
  transactionHash
}

type LoanStartedEvent {
  id: Bytes!
  loan: Loan!
  borrower: User!
  lender: User
  loanPrincipalAmount: BigInt!
  maximumRepaymentAmount: BigInt!
  nftCollateralId: BigInt!
  loanERC20Denomination: Bytes!
  loanDuration: BigInt!
  loanInterestRateForDurationInBasisPoints: Int!
  loanAdminFeeInBasisPoints: Int!
  nftCollateralWrapper: Bytes!
  loanStartTime: BigInt!
  nftCollateralContract: Bytes!
  revenueSharePartner: Bytes!
  revenueShareInBasisPoints: Int!
  referralFeeInBasisPoints: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input LoanStartedEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  borrower: String
  borrower_not: String
  borrower_gt: String
  borrower_lt: String
  borrower_gte: String
  borrower_lte: String
  borrower_in: [String!]
  borrower_not_in: [String!]
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_: User_filter
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_: User_filter
  loanPrincipalAmount: BigInt
  loanPrincipalAmount_not: BigInt
  loanPrincipalAmount_gt: BigInt
  loanPrincipalAmount_lt: BigInt
  loanPrincipalAmount_gte: BigInt
  loanPrincipalAmount_lte: BigInt
  loanPrincipalAmount_in: [BigInt!]
  loanPrincipalAmount_not_in: [BigInt!]
  maximumRepaymentAmount: BigInt
  maximumRepaymentAmount_not: BigInt
  maximumRepaymentAmount_gt: BigInt
  maximumRepaymentAmount_lt: BigInt
  maximumRepaymentAmount_gte: BigInt
  maximumRepaymentAmount_lte: BigInt
  maximumRepaymentAmount_in: [BigInt!]
  maximumRepaymentAmount_not_in: [BigInt!]
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  loanERC20Denomination: Bytes
  loanERC20Denomination_not: Bytes
  loanERC20Denomination_gt: Bytes
  loanERC20Denomination_lt: Bytes
  loanERC20Denomination_gte: Bytes
  loanERC20Denomination_lte: Bytes
  loanERC20Denomination_in: [Bytes!]
  loanERC20Denomination_not_in: [Bytes!]
  loanERC20Denomination_contains: Bytes
  loanERC20Denomination_not_contains: Bytes
  loanDuration: BigInt
  loanDuration_not: BigInt
  loanDuration_gt: BigInt
  loanDuration_lt: BigInt
  loanDuration_gte: BigInt
  loanDuration_lte: BigInt
  loanDuration_in: [BigInt!]
  loanDuration_not_in: [BigInt!]
  loanInterestRateForDurationInBasisPoints: Int
  loanInterestRateForDurationInBasisPoints_not: Int
  loanInterestRateForDurationInBasisPoints_gt: Int
  loanInterestRateForDurationInBasisPoints_lt: Int
  loanInterestRateForDurationInBasisPoints_gte: Int
  loanInterestRateForDurationInBasisPoints_lte: Int
  loanInterestRateForDurationInBasisPoints_in: [Int!]
  loanInterestRateForDurationInBasisPoints_not_in: [Int!]
  loanAdminFeeInBasisPoints: Int
  loanAdminFeeInBasisPoints_not: Int
  loanAdminFeeInBasisPoints_gt: Int
  loanAdminFeeInBasisPoints_lt: Int
  loanAdminFeeInBasisPoints_gte: Int
  loanAdminFeeInBasisPoints_lte: Int
  loanAdminFeeInBasisPoints_in: [Int!]
  loanAdminFeeInBasisPoints_not_in: [Int!]
  nftCollateralWrapper: Bytes
  nftCollateralWrapper_not: Bytes
  nftCollateralWrapper_gt: Bytes
  nftCollateralWrapper_lt: Bytes
  nftCollateralWrapper_gte: Bytes
  nftCollateralWrapper_lte: Bytes
  nftCollateralWrapper_in: [Bytes!]
  nftCollateralWrapper_not_in: [Bytes!]
  nftCollateralWrapper_contains: Bytes
  nftCollateralWrapper_not_contains: Bytes
  loanStartTime: BigInt
  loanStartTime_not: BigInt
  loanStartTime_gt: BigInt
  loanStartTime_lt: BigInt
  loanStartTime_gte: BigInt
  loanStartTime_lte: BigInt
  loanStartTime_in: [BigInt!]
  loanStartTime_not_in: [BigInt!]
  nftCollateralContract: Bytes
  nftCollateralContract_not: Bytes
  nftCollateralContract_gt: Bytes
  nftCollateralContract_lt: Bytes
  nftCollateralContract_gte: Bytes
  nftCollateralContract_lte: Bytes
  nftCollateralContract_in: [Bytes!]
  nftCollateralContract_not_in: [Bytes!]
  nftCollateralContract_contains: Bytes
  nftCollateralContract_not_contains: Bytes
  revenueSharePartner: Bytes
  revenueSharePartner_not: Bytes
  revenueSharePartner_gt: Bytes
  revenueSharePartner_lt: Bytes
  revenueSharePartner_gte: Bytes
  revenueSharePartner_lte: Bytes
  revenueSharePartner_in: [Bytes!]
  revenueSharePartner_not_in: [Bytes!]
  revenueSharePartner_contains: Bytes
  revenueSharePartner_not_contains: Bytes
  revenueShareInBasisPoints: Int
  revenueShareInBasisPoints_not: Int
  revenueShareInBasisPoints_gt: Int
  revenueShareInBasisPoints_lt: Int
  revenueShareInBasisPoints_gte: Int
  revenueShareInBasisPoints_lte: Int
  revenueShareInBasisPoints_in: [Int!]
  revenueShareInBasisPoints_not_in: [Int!]
  referralFeeInBasisPoints: Int
  referralFeeInBasisPoints_not: Int
  referralFeeInBasisPoints_gt: Int
  referralFeeInBasisPoints_lt: Int
  referralFeeInBasisPoints_gte: Int
  referralFeeInBasisPoints_lte: Int
  referralFeeInBasisPoints_in: [Int!]
  referralFeeInBasisPoints_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanStartedEvent_filter]
  or: [LoanStartedEvent_filter]
}

enum LoanStartedEvent_orderBy {
  id
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  borrower
  borrower__id
  borrower__address
  borrower__tokenCount
  lender
  lender__id
  lender__address
  lender__tokenCount
  loanPrincipalAmount
  maximumRepaymentAmount
  nftCollateralId
  loanERC20Denomination
  loanDuration
  loanInterestRateForDurationInBasisPoints
  loanAdminFeeInBasisPoints
  nftCollateralWrapper
  loanStartTime
  nftCollateralContract
  revenueSharePartner
  revenueShareInBasisPoints
  referralFeeInBasisPoints
  blockNumber
  blockTimestamp
  transactionHash
}

enum LoanStatus {
  ActiveOrDefault
  Liquidated
  Repaid
  Active
  CollateralLiquidated
}

input Loan_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loanProvider: String
  loanProvider_not: String
  loanProvider_gt: String
  loanProvider_lt: String
  loanProvider_gte: String
  loanProvider_lte: String
  loanProvider_in: [String!]
  loanProvider_not_in: [String!]
  loanProvider_contains: String
  loanProvider_contains_nocase: String
  loanProvider_not_contains: String
  loanProvider_not_contains_nocase: String
  loanProvider_starts_with: String
  loanProvider_starts_with_nocase: String
  loanProvider_not_starts_with: String
  loanProvider_not_starts_with_nocase: String
  loanProvider_ends_with: String
  loanProvider_ends_with_nocase: String
  loanProvider_not_ends_with: String
  loanProvider_not_ends_with_nocase: String
  loanContract: Bytes
  loanContract_not: Bytes
  loanContract_gt: Bytes
  loanContract_lt: Bytes
  loanContract_gte: Bytes
  loanContract_lte: Bytes
  loanContract_in: [Bytes!]
  loanContract_not_in: [Bytes!]
  loanContract_contains: Bytes
  loanContract_not_contains: Bytes
  loanId: BigInt
  loanId_not: BigInt
  loanId_gt: BigInt
  loanId_lt: BigInt
  loanId_gte: BigInt
  loanId_lte: BigInt
  loanId_in: [BigInt!]
  loanId_not_in: [BigInt!]
  loanStatus: LoanStatus
  loanStatus_not: LoanStatus
  loanStatus_in: [LoanStatus!]
  loanStatus_not_in: [LoanStatus!]
  borrower: String
  borrower_not: String
  borrower_gt: String
  borrower_lt: String
  borrower_gte: String
  borrower_lte: String
  borrower_in: [String!]
  borrower_not_in: [String!]
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_: User_filter
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_: User_filter
  loanPrincipalAmount: BigInt
  loanPrincipalAmount_not: BigInt
  loanPrincipalAmount_gt: BigInt
  loanPrincipalAmount_lt: BigInt
  loanPrincipalAmount_gte: BigInt
  loanPrincipalAmount_lte: BigInt
  loanPrincipalAmount_in: [BigInt!]
  loanPrincipalAmount_not_in: [BigInt!]
  maximumRepaymentAmount: BigInt
  maximumRepaymentAmount_not: BigInt
  maximumRepaymentAmount_gt: BigInt
  maximumRepaymentAmount_lt: BigInt
  maximumRepaymentAmount_gte: BigInt
  maximumRepaymentAmount_lte: BigInt
  maximumRepaymentAmount_in: [BigInt!]
  maximumRepaymentAmount_not_in: [BigInt!]
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  loanERC20Denomination: Bytes
  loanERC20Denomination_not: Bytes
  loanERC20Denomination_gt: Bytes
  loanERC20Denomination_lt: Bytes
  loanERC20Denomination_gte: Bytes
  loanERC20Denomination_lte: Bytes
  loanERC20Denomination_in: [Bytes!]
  loanERC20Denomination_not_in: [Bytes!]
  loanERC20Denomination_contains: Bytes
  loanERC20Denomination_not_contains: Bytes
  loanDuration: BigInt
  loanDuration_not: BigInt
  loanDuration_gt: BigInt
  loanDuration_lt: BigInt
  loanDuration_gte: BigInt
  loanDuration_lte: BigInt
  loanDuration_in: [BigInt!]
  loanDuration_not_in: [BigInt!]
  loanInterestRateForDurationInBasisPoints: Int
  loanInterestRateForDurationInBasisPoints_not: Int
  loanInterestRateForDurationInBasisPoints_gt: Int
  loanInterestRateForDurationInBasisPoints_lt: Int
  loanInterestRateForDurationInBasisPoints_gte: Int
  loanInterestRateForDurationInBasisPoints_lte: Int
  loanInterestRateForDurationInBasisPoints_in: [Int!]
  loanInterestRateForDurationInBasisPoints_not_in: [Int!]
  loanAdminFeeInBasisPoints: Int
  loanAdminFeeInBasisPoints_not: Int
  loanAdminFeeInBasisPoints_gt: Int
  loanAdminFeeInBasisPoints_lt: Int
  loanAdminFeeInBasisPoints_gte: Int
  loanAdminFeeInBasisPoints_lte: Int
  loanAdminFeeInBasisPoints_in: [Int!]
  loanAdminFeeInBasisPoints_not_in: [Int!]
  nftCollateralWrapper: Bytes
  nftCollateralWrapper_not: Bytes
  nftCollateralWrapper_gt: Bytes
  nftCollateralWrapper_lt: Bytes
  nftCollateralWrapper_gte: Bytes
  nftCollateralWrapper_lte: Bytes
  nftCollateralWrapper_in: [Bytes!]
  nftCollateralWrapper_not_in: [Bytes!]
  nftCollateralWrapper_contains: Bytes
  nftCollateralWrapper_not_contains: Bytes
  loanStartTime: BigInt
  loanStartTime_not: BigInt
  loanStartTime_gt: BigInt
  loanStartTime_lt: BigInt
  loanStartTime_gte: BigInt
  loanStartTime_lte: BigInt
  loanStartTime_in: [BigInt!]
  loanStartTime_not_in: [BigInt!]
  nftCollateralContract: Bytes
  nftCollateralContract_not: Bytes
  nftCollateralContract_gt: Bytes
  nftCollateralContract_lt: Bytes
  nftCollateralContract_gte: Bytes
  nftCollateralContract_lte: Bytes
  nftCollateralContract_in: [Bytes!]
  nftCollateralContract_not_in: [Bytes!]
  nftCollateralContract_contains: Bytes
  nftCollateralContract_not_contains: Bytes
  revenueSharePartner: Bytes
  revenueSharePartner_not: Bytes
  revenueSharePartner_gt: Bytes
  revenueSharePartner_lt: Bytes
  revenueSharePartner_gte: Bytes
  revenueSharePartner_lte: Bytes
  revenueSharePartner_in: [Bytes!]
  revenueSharePartner_not_in: [Bytes!]
  revenueSharePartner_contains: Bytes
  revenueSharePartner_not_contains: Bytes
  revenueShareInBasisPoints: Int
  revenueShareInBasisPoints_not: Int
  revenueShareInBasisPoints_gt: Int
  revenueShareInBasisPoints_lt: Int
  revenueShareInBasisPoints_gte: Int
  revenueShareInBasisPoints_lte: Int
  revenueShareInBasisPoints_in: [Int!]
  revenueShareInBasisPoints_not_in: [Int!]
  referralFeeInBasisPoints: Int
  referralFeeInBasisPoints_not: Int
  referralFeeInBasisPoints_gt: Int
  referralFeeInBasisPoints_lt: Int
  referralFeeInBasisPoints_gte: Int
  referralFeeInBasisPoints_lte: Int
  referralFeeInBasisPoints_in: [Int!]
  referralFeeInBasisPoints_not_in: [Int!]
  loanMaturityDate: BigInt
  loanMaturityDate_not: BigInt
  loanMaturityDate_gt: BigInt
  loanMaturityDate_lt: BigInt
  loanMaturityDate_gte: BigInt
  loanMaturityDate_lte: BigInt
  loanMaturityDate_in: [BigInt!]
  loanMaturityDate_not_in: [BigInt!]
  loanLiquidationDate: BigInt
  loanLiquidationDate_not: BigInt
  loanLiquidationDate_gt: BigInt
  loanLiquidationDate_lt: BigInt
  loanLiquidationDate_gte: BigInt
  loanLiquidationDate_lte: BigInt
  loanLiquidationDate_in: [BigInt!]
  loanLiquidationDate_not_in: [BigInt!]
  totalRenegotiationFeesPaid: BigInt
  totalRenegotiationFeesPaid_not: BigInt
  totalRenegotiationFeesPaid_gt: BigInt
  totalRenegotiationFeesPaid_lt: BigInt
  totalRenegotiationFeesPaid_gte: BigInt
  totalRenegotiationFeesPaid_lte: BigInt
  totalRenegotiationFeesPaid_in: [BigInt!]
  totalRenegotiationFeesPaid_not_in: [BigInt!]
  totalRenegotiationAdminFeesPaid: BigInt
  totalRenegotiationAdminFeesPaid_not: BigInt
  totalRenegotiationAdminFeesPaid_gt: BigInt
  totalRenegotiationAdminFeesPaid_lt: BigInt
  totalRenegotiationAdminFeesPaid_gte: BigInt
  totalRenegotiationAdminFeesPaid_lte: BigInt
  totalRenegotiationAdminFeesPaid_in: [BigInt!]
  totalRenegotiationAdminFeesPaid_not_in: [BigInt!]
  amountPaidToLender: BigInt
  amountPaidToLender_not: BigInt
  amountPaidToLender_gt: BigInt
  amountPaidToLender_lt: BigInt
  amountPaidToLender_gte: BigInt
  amountPaidToLender_lte: BigInt
  amountPaidToLender_in: [BigInt!]
  amountPaidToLender_not_in: [BigInt!]
  adminFeePaid: BigInt
  adminFeePaid_not: BigInt
  adminFeePaid_gt: BigInt
  adminFeePaid_lt: BigInt
  adminFeePaid_gte: BigInt
  adminFeePaid_lte: BigInt
  adminFeePaid_in: [BigInt!]
  adminFeePaid_not_in: [BigInt!]
  revenueSharePaid: BigInt
  revenueSharePaid_not: BigInt
  revenueSharePaid_gt: BigInt
  revenueSharePaid_lt: BigInt
  revenueSharePaid_gte: BigInt
  revenueSharePaid_lte: BigInt
  revenueSharePaid_in: [BigInt!]
  revenueSharePaid_not_in: [BigInt!]
  encodedLoanReceipt: Bytes
  encodedLoanReceipt_not: Bytes
  encodedLoanReceipt_gt: Bytes
  encodedLoanReceipt_lt: Bytes
  encodedLoanReceipt_gte: Bytes
  encodedLoanReceipt_lte: Bytes
  encodedLoanReceipt_in: [Bytes!]
  encodedLoanReceipt_not_in: [Bytes!]
  encodedLoanReceipt_contains: Bytes
  encodedLoanReceipt_not_contains: Bytes
  obligationReceipt_: ObligationReceipt_filter
  promissoryNotes_: PromissoryNote_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Loan_filter]
  or: [Loan_filter]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  status: LoanStatus
  status_not: LoanStatus
  status_in: [LoanStatus!]
  status_not_in: [LoanStatus!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  completionTransactionHash: Bytes
  completionTransactionHash_not: Bytes
  completionTransactionHash_gt: Bytes
  completionTransactionHash_lt: Bytes
  completionTransactionHash_gte: Bytes
  completionTransactionHash_lte: Bytes
  completionTransactionHash_in: [Bytes!]
  completionTransactionHash_not_in: [Bytes!]
  completionTransactionHash_contains: Bytes
  completionTransactionHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  completion: BigInt
  completion_not: BigInt
  completion_gt: BigInt
  completion_lt: BigInt
  completion_gte: BigInt
  completion_lte: BigInt
  completion_in: [BigInt!]
  completion_not_in: [BigInt!]
  bundle: String
  bundle_not: String
  bundle_gt: String
  bundle_lt: String
  bundle_gte: String
  bundle_lte: String
  bundle_in: [String!]
  bundle_not_in: [String!]
  bundle_contains: String
  bundle_contains_nocase: String
  bundle_not_contains: String
  bundle_not_contains_nocase: String
  bundle_starts_with: String
  bundle_starts_with_nocase: String
  bundle_not_starts_with: String
  bundle_not_starts_with_nocase: String
  bundle_ends_with: String
  bundle_ends_with_nocase: String
  bundle_not_ends_with: String
  bundle_not_ends_with_nocase: String
  bundle_: Bundle_filter
  batch: String
  batch_not: String
  batch_gt: String
  batch_lt: String
  batch_gte: String
  batch_lte: String
  batch_in: [String!]
  batch_not_in: [String!]
  batch_contains: String
  batch_contains_nocase: String
  batch_not_contains: String
  batch_not_contains_nocase: String
  batch_starts_with: String
  batch_starts_with_nocase: String
  batch_not_starts_with: String
  batch_not_starts_with_nocase: String
  batch_ends_with: String
  batch_ends_with_nocase: String
  batch_not_ends_with: String
  batch_not_ends_with_nocase: String
  batch_: Batch_filter
  delegate: Bytes
  delegate_not: Bytes
  delegate_gt: Bytes
  delegate_lt: Bytes
  delegate_gte: Bytes
  delegate_lte: Bytes
  delegate_in: [Bytes!]
  delegate_not_in: [Bytes!]
  delegate_contains: Bytes
  delegate_not_contains: Bytes
  delegateV2: Bytes
  delegateV2_not: Bytes
  delegateV2_gt: Bytes
  delegateV2_lt: Bytes
  delegateV2_gte: Bytes
  delegateV2_lte: Bytes
  delegateV2_in: [Bytes!]
  delegateV2_not_in: [Bytes!]
  delegateV2_contains: Bytes
  delegateV2_not_contains: Bytes
  maturity: BigInt
  maturity_not: BigInt
  maturity_gt: BigInt
  maturity_lt: BigInt
  maturity_gte: BigInt
  maturity_lte: BigInt
  maturity_in: [BigInt!]
  maturity_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  collateralTokenIds: [BigInt!]
  collateralTokenIds_not: [BigInt!]
  collateralTokenIds_contains: [BigInt!]
  collateralTokenIds_contains_nocase: [BigInt!]
  collateralTokenIds_not_contains: [BigInt!]
  collateralTokenIds_not_contains_nocase: [BigInt!]
  collateralWrapperToken: Bytes
  collateralWrapperToken_not: Bytes
  collateralWrapperToken_gt: Bytes
  collateralWrapperToken_lt: Bytes
  collateralWrapperToken_gte: Bytes
  collateralWrapperToken_lte: Bytes
  collateralWrapperToken_in: [Bytes!]
  collateralWrapperToken_not_in: [Bytes!]
  collateralWrapperToken_contains: Bytes
  collateralWrapperToken_not_contains: Bytes
  collateralWrapperTokenId: BigInt
  collateralWrapperTokenId_not: BigInt
  collateralWrapperTokenId_gt: BigInt
  collateralWrapperTokenId_lt: BigInt
  collateralWrapperTokenId_gte: BigInt
  collateralWrapperTokenId_lte: BigInt
  collateralWrapperTokenId_in: [BigInt!]
  collateralWrapperTokenId_not_in: [BigInt!]
  ticks: [BigInt!]
  ticks_not: [BigInt!]
  ticks_contains: [BigInt!]
  ticks_contains_nocase: [BigInt!]
  ticks_not_contains: [BigInt!]
  ticks_not_contains_nocase: [BigInt!]
  useds: [BigInt!]
  useds_not: [BigInt!]
  useds_contains: [BigInt!]
  useds_contains_nocase: [BigInt!]
  useds_not_contains: [BigInt!]
  useds_not_contains_nocase: [BigInt!]
  interests: [BigInt!]
  interests_not: [BigInt!]
  interests_contains: [BigInt!]
  interests_contains_nocase: [BigInt!]
  interests_not_contains: [BigInt!]
  interests_not_contains_nocase: [BigInt!]
  principal: BigInt
  principal_not: BigInt
  principal_gt: BigInt
  principal_lt: BigInt
  principal_gte: BigInt
  principal_lte: BigInt
  principal_in: [BigInt!]
  principal_not_in: [BigInt!]
  repayment: BigInt
  repayment_not: BigInt
  repayment_gt: BigInt
  repayment_lt: BigInt
  repayment_gte: BigInt
  repayment_lte: BigInt
  repayment_in: [BigInt!]
  repayment_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  proceeds: BigInt
  proceeds_not: BigInt
  proceeds_gt: BigInt
  proceeds_lt: BigInt
  proceeds_gte: BigInt
  proceeds_lte: BigInt
  proceeds_in: [BigInt!]
  proceeds_not_in: [BigInt!]
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  loanReceipt: Bytes
  loanReceipt_not: Bytes
  loanReceipt_gt: Bytes
  loanReceipt_lt: Bytes
  loanReceipt_gte: Bytes
  loanReceipt_lte: Bytes
  loanReceipt_in: [Bytes!]
  loanReceipt_not_in: [Bytes!]
  loanReceipt_contains: Bytes
  loanReceipt_not_contains: Bytes
}

enum Loan_orderBy {
  id
  loanProvider
  loanContract
  loanId
  loanStatus
  borrower
  borrower__id
  borrower__address
  borrower__tokenCount
  lender
  lender__id
  lender__address
  lender__tokenCount
  loanPrincipalAmount
  maximumRepaymentAmount
  nftCollateralId
  loanERC20Denomination
  loanDuration
  loanInterestRateForDurationInBasisPoints
  loanAdminFeeInBasisPoints
  nftCollateralWrapper
  loanStartTime
  nftCollateralContract
  revenueSharePartner
  revenueShareInBasisPoints
  referralFeeInBasisPoints
  loanMaturityDate
  loanLiquidationDate
  totalRenegotiationFeesPaid
  totalRenegotiationAdminFeesPaid
  amountPaidToLender
  adminFeePaid
  revenueSharePaid
  encodedLoanReceipt
  obligationReceipt
  obligationReceipt__id
  obligationReceipt__receiptTokenId
  obligationReceipt__nftCollateralContract
  obligationReceipt__nftCollateralId
  promissoryNotes
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__adminFeeShareRecipient
  pool__adminFeeShareSplit
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__externalPriceOracle
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  status
  transactionHash
  completionTransactionHash
  timestamp
  completion
  bundle
  bundle__id
  bundle__owner
  bundle__collateralWrapperContext
  bundle__underlyingCollateralTokenAddress
  batch
  batch__id
  batch__owner
  batch__collateralWrapperContext
  batch__underlyingCollateralTokenAddress
  delegate
  delegateV2
  maturity
  duration
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralTokenIds
  collateralWrapperToken
  collateralWrapperTokenId
  ticks
  useds
  interests
  principal
  repayment
  adminFee
  proceeds
  collateralWrapperContext
  loanReceipt
}

type ObligationReceipt {
  id: Bytes!
  receiptTokenId: BigInt!
  loan: Loan!
  nftCollateralContract: Bytes!
  nftCollateralId: BigInt!
  creator: User!
  holder: User
}

input ObligationReceipt_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  receiptTokenId: BigInt
  receiptTokenId_not: BigInt
  receiptTokenId_gt: BigInt
  receiptTokenId_lt: BigInt
  receiptTokenId_gte: BigInt
  receiptTokenId_lte: BigInt
  receiptTokenId_in: [BigInt!]
  receiptTokenId_not_in: [BigInt!]
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  nftCollateralContract: Bytes
  nftCollateralContract_not: Bytes
  nftCollateralContract_gt: Bytes
  nftCollateralContract_lt: Bytes
  nftCollateralContract_gte: Bytes
  nftCollateralContract_lte: Bytes
  nftCollateralContract_in: [Bytes!]
  nftCollateralContract_not_in: [Bytes!]
  nftCollateralContract_contains: Bytes
  nftCollateralContract_not_contains: Bytes
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: User_filter
  holder: String
  holder_not: String
  holder_gt: String
  holder_lt: String
  holder_gte: String
  holder_lte: String
  holder_in: [String!]
  holder_not_in: [String!]
  holder_contains: String
  holder_contains_nocase: String
  holder_not_contains: String
  holder_not_contains_nocase: String
  holder_starts_with: String
  holder_starts_with_nocase: String
  holder_not_starts_with: String
  holder_not_starts_with_nocase: String
  holder_ends_with: String
  holder_ends_with_nocase: String
  holder_not_ends_with: String
  holder_not_ends_with_nocase: String
  holder_: User_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ObligationReceipt_filter]
  or: [ObligationReceipt_filter]
}

enum ObligationReceipt_orderBy {
  id
  receiptTokenId
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  nftCollateralContract
  nftCollateralId
  creator
  creator__id
  creator__address
  creator__tokenCount
  holder
  holder__id
  holder__address
  holder__tokenCount
}

type OperatingAgreementUpdate {
  id: Bytes!
  token: Token!
  newValue: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input OperatingAgreementUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  newValue: String
  newValue_not: String
  newValue_gt: String
  newValue_lt: String
  newValue_gte: String
  newValue_lte: String
  newValue_in: [String!]
  newValue_not_in: [String!]
  newValue_contains: String
  newValue_contains_nocase: String
  newValue_not_contains: String
  newValue_not_contains_nocase: String
  newValue_starts_with: String
  newValue_starts_with_nocase: String
  newValue_not_starts_with: String
  newValue_not_starts_with_nocase: String
  newValue_ends_with: String
  newValue_ends_with_nocase: String
  newValue_not_ends_with: String
  newValue_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OperatingAgreementUpdate_filter]
  or: [OperatingAgreementUpdate_filter]
}

enum OperatingAgreementUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PromissoryNote {
  id: Bytes!
  noteTokenId: BigInt!
  loan: Loan
  creator: User!
  holder: User
}

input PromissoryNote_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  noteTokenId: BigInt
  noteTokenId_not: BigInt
  noteTokenId_gt: BigInt
  noteTokenId_lt: BigInt
  noteTokenId_gte: BigInt
  noteTokenId_lte: BigInt
  noteTokenId_in: [BigInt!]
  noteTokenId_not_in: [BigInt!]
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: User_filter
  holder: String
  holder_not: String
  holder_gt: String
  holder_lt: String
  holder_gte: String
  holder_lte: String
  holder_in: [String!]
  holder_not_in: [String!]
  holder_contains: String
  holder_contains_nocase: String
  holder_not_contains: String
  holder_not_contains_nocase: String
  holder_starts_with: String
  holder_starts_with_nocase: String
  holder_not_starts_with: String
  holder_not_starts_with_nocase: String
  holder_ends_with: String
  holder_ends_with_nocase: String
  holder_not_ends_with: String
  holder_not_ends_with_nocase: String
  holder_: User_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PromissoryNote_filter]
  or: [PromissoryNote_filter]
}

enum PromissoryNote_orderBy {
  id
  noteTokenId
  loan
  loan__id
  loan__loanProvider
  loan__loanContract
  loan__loanId
  loan__loanStatus
  loan__loanPrincipalAmount
  loan__maximumRepaymentAmount
  loan__nftCollateralId
  loan__loanERC20Denomination
  loan__loanDuration
  loan__loanInterestRateForDurationInBasisPoints
  loan__loanAdminFeeInBasisPoints
  loan__nftCollateralWrapper
  loan__loanStartTime
  loan__nftCollateralContract
  loan__revenueSharePartner
  loan__revenueShareInBasisPoints
  loan__referralFeeInBasisPoints
  loan__loanMaturityDate
  loan__loanLiquidationDate
  loan__totalRenegotiationFeesPaid
  loan__totalRenegotiationAdminFeesPaid
  loan__amountPaidToLender
  loan__adminFeePaid
  loan__revenueSharePaid
  loan__encodedLoanReceipt
  creator
  creator__id
  creator__address
  creator__tokenCount
  holder
  holder__id
  holder__address
  holder__tokenCount
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: Bytes!
  mintTimestamp: BigInt!
  booleanTraits(skip: Int = 0, first: Int = 100, orderBy: TraitBoolean_orderBy, orderDirection: OrderDirection, where: TraitBoolean_filter): [TraitBoolean!]
  configuration: String!
  supply: BigInt!
  balances(skip: Int = 0, first: Int = 100, orderBy: Balance_orderBy, orderDirection: OrderDirection, where: Balance_filter): [Balance!]
  creator: User!
  decimalTraits(skip: Int = 0, first: Int = 100, orderBy: TraitDecimal_orderBy, orderDirection: OrderDirection, where: TraitDecimal_filter): [TraitDecimal!]
  definition: String!
  operatingAgreement: String!
  stringTraits(skip: Int = 0, first: Int = 100, orderBy: TraitString_orderBy, orderDirection: OrderDirection, where: TraitString_filter): [TraitString!]
  tokenId: BigInt!
  transfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]
  uri: String!
  validator: Bytes!
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  mintTimestamp: BigInt
  mintTimestamp_not: BigInt
  mintTimestamp_gt: BigInt
  mintTimestamp_lt: BigInt
  mintTimestamp_gte: BigInt
  mintTimestamp_lte: BigInt
  mintTimestamp_in: [BigInt!]
  mintTimestamp_not_in: [BigInt!]
  booleanTraits_: TraitBoolean_filter
  configuration: String
  configuration_not: String
  configuration_gt: String
  configuration_lt: String
  configuration_gte: String
  configuration_lte: String
  configuration_in: [String!]
  configuration_not_in: [String!]
  configuration_contains: String
  configuration_contains_nocase: String
  configuration_not_contains: String
  configuration_not_contains_nocase: String
  configuration_starts_with: String
  configuration_starts_with_nocase: String
  configuration_not_starts_with: String
  configuration_not_starts_with_nocase: String
  configuration_ends_with: String
  configuration_ends_with_nocase: String
  configuration_not_ends_with: String
  configuration_not_ends_with_nocase: String
  supply: BigInt
  supply_not: BigInt
  supply_gt: BigInt
  supply_lt: BigInt
  supply_gte: BigInt
  supply_lte: BigInt
  supply_in: [BigInt!]
  supply_not_in: [BigInt!]
  balances_: Balance_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: User_filter
  decimalTraits_: TraitDecimal_filter
  definition: String
  definition_not: String
  definition_gt: String
  definition_lt: String
  definition_gte: String
  definition_lte: String
  definition_in: [String!]
  definition_not_in: [String!]
  definition_contains: String
  definition_contains_nocase: String
  definition_not_contains: String
  definition_not_contains_nocase: String
  definition_starts_with: String
  definition_starts_with_nocase: String
  definition_not_starts_with: String
  definition_not_starts_with_nocase: String
  definition_ends_with: String
  definition_ends_with_nocase: String
  definition_not_ends_with: String
  definition_not_ends_with_nocase: String
  operatingAgreement: String
  operatingAgreement_not: String
  operatingAgreement_gt: String
  operatingAgreement_lt: String
  operatingAgreement_gte: String
  operatingAgreement_lte: String
  operatingAgreement_in: [String!]
  operatingAgreement_not_in: [String!]
  operatingAgreement_contains: String
  operatingAgreement_contains_nocase: String
  operatingAgreement_not_contains: String
  operatingAgreement_not_contains_nocase: String
  operatingAgreement_starts_with: String
  operatingAgreement_starts_with_nocase: String
  operatingAgreement_not_starts_with: String
  operatingAgreement_not_starts_with_nocase: String
  operatingAgreement_ends_with: String
  operatingAgreement_ends_with_nocase: String
  operatingAgreement_not_ends_with: String
  operatingAgreement_not_ends_with_nocase: String
  stringTraits_: TraitString_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  transfers_: Transfer_filter
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  validator: Bytes
  validator_not: Bytes
  validator_gt: Bytes
  validator_lt: Bytes
  validator_gte: Bytes
  validator_lte: Bytes
  validator_in: [Bytes!]
  validator_not_in: [Bytes!]
  validator_contains: Bytes
  validator_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  mintTimestamp
  booleanTraits
  configuration
  supply
  balances
  creator
  creator__id
  creator__address
  creator__tokenCount
  decimalTraits
  definition
  operatingAgreement
  stringTraits
  tokenId
  transfers
  uri
  validator
}

type TraitBoolean {
  id: Bytes!
  token: Token!
  key: String!
  displayName: String!
  value: Boolean!
}

type TraitBooleanUpdate {
  id: Bytes!
  token: Token!
  traitKey: String!
  newValue: Boolean
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TraitBooleanUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  traitKey: String
  traitKey_not: String
  traitKey_gt: String
  traitKey_lt: String
  traitKey_gte: String
  traitKey_lte: String
  traitKey_in: [String!]
  traitKey_not_in: [String!]
  traitKey_contains: String
  traitKey_contains_nocase: String
  traitKey_not_contains: String
  traitKey_not_contains_nocase: String
  traitKey_starts_with: String
  traitKey_starts_with_nocase: String
  traitKey_not_starts_with: String
  traitKey_not_starts_with_nocase: String
  traitKey_ends_with: String
  traitKey_ends_with_nocase: String
  traitKey_not_ends_with: String
  traitKey_not_ends_with_nocase: String
  newValue: Boolean
  newValue_not: Boolean
  newValue_in: [Boolean!]
  newValue_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitBooleanUpdate_filter]
  or: [TraitBooleanUpdate_filter]
}

enum TraitBooleanUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  traitKey
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

input TraitBoolean_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  value: Boolean
  value_not: Boolean
  value_in: [Boolean!]
  value_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitBoolean_filter]
  or: [TraitBoolean_filter]
}

enum TraitBoolean_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  key
  displayName
  value
}

type TraitDecimal {
  id: Bytes!
  token: Token!
  key: String!
  displayName: String!
  value: Int
}

type TraitDecimalUpdate {
  id: Bytes!
  token: Token!
  traitKey: String!
  newValue: Int
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TraitDecimalUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  traitKey: String
  traitKey_not: String
  traitKey_gt: String
  traitKey_lt: String
  traitKey_gte: String
  traitKey_lte: String
  traitKey_in: [String!]
  traitKey_not_in: [String!]
  traitKey_contains: String
  traitKey_contains_nocase: String
  traitKey_not_contains: String
  traitKey_not_contains_nocase: String
  traitKey_starts_with: String
  traitKey_starts_with_nocase: String
  traitKey_not_starts_with: String
  traitKey_not_starts_with_nocase: String
  traitKey_ends_with: String
  traitKey_ends_with_nocase: String
  traitKey_not_ends_with: String
  traitKey_not_ends_with_nocase: String
  newValue: Int
  newValue_not: Int
  newValue_gt: Int
  newValue_lt: Int
  newValue_gte: Int
  newValue_lte: Int
  newValue_in: [Int!]
  newValue_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitDecimalUpdate_filter]
  or: [TraitDecimalUpdate_filter]
}

enum TraitDecimalUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  traitKey
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

input TraitDecimal_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitDecimal_filter]
  or: [TraitDecimal_filter]
}

enum TraitDecimal_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  key
  displayName
  value
}

type TraitDefinition {
  id: Bytes!
  type: TraitType!
  key: String!
  displayName: String!
}

input TraitDefinition_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  type: TraitType
  type_not: TraitType
  type_in: [TraitType!]
  type_not_in: [TraitType!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitDefinition_filter]
  or: [TraitDefinition_filter]
}

enum TraitDefinition_orderBy {
  id
  type
  key
  displayName
}

type TraitMetadata {
  id: Bytes!
  uri: String!
  decoded: String!
}

type TraitMetadataUriUpdate {
  id: Bytes!
  uri: String!
  decoded: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TraitMetadataUriUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  decoded: String
  decoded_not: String
  decoded_gt: String
  decoded_lt: String
  decoded_gte: String
  decoded_lte: String
  decoded_in: [String!]
  decoded_not_in: [String!]
  decoded_contains: String
  decoded_contains_nocase: String
  decoded_not_contains: String
  decoded_not_contains_nocase: String
  decoded_starts_with: String
  decoded_starts_with_nocase: String
  decoded_not_starts_with: String
  decoded_not_starts_with_nocase: String
  decoded_ends_with: String
  decoded_ends_with_nocase: String
  decoded_not_ends_with: String
  decoded_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitMetadataUriUpdate_filter]
  or: [TraitMetadataUriUpdate_filter]
}

enum TraitMetadataUriUpdate_orderBy {
  id
  uri
  decoded
  blockNumber
  blockTimestamp
  transactionHash
}

input TraitMetadata_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  decoded: String
  decoded_not: String
  decoded_gt: String
  decoded_lt: String
  decoded_gte: String
  decoded_lte: String
  decoded_in: [String!]
  decoded_not_in: [String!]
  decoded_contains: String
  decoded_contains_nocase: String
  decoded_not_contains: String
  decoded_not_contains_nocase: String
  decoded_starts_with: String
  decoded_starts_with_nocase: String
  decoded_not_starts_with: String
  decoded_not_starts_with_nocase: String
  decoded_ends_with: String
  decoded_ends_with_nocase: String
  decoded_not_ends_with: String
  decoded_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitMetadata_filter]
  or: [TraitMetadata_filter]
}

enum TraitMetadata_orderBy {
  id
  uri
  decoded
}

type TraitString {
  id: Bytes!
  key: String!
  displayName: String!
  token: Token!
  value: String
}

type TraitStringUpdate {
  id: Bytes!
  token: Token!
  traitKey: String!
  newValue: String
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TraitStringUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  traitKey: String
  traitKey_not: String
  traitKey_gt: String
  traitKey_lt: String
  traitKey_gte: String
  traitKey_lte: String
  traitKey_in: [String!]
  traitKey_not_in: [String!]
  traitKey_contains: String
  traitKey_contains_nocase: String
  traitKey_not_contains: String
  traitKey_not_contains_nocase: String
  traitKey_starts_with: String
  traitKey_starts_with_nocase: String
  traitKey_not_starts_with: String
  traitKey_not_starts_with_nocase: String
  traitKey_ends_with: String
  traitKey_ends_with_nocase: String
  traitKey_not_ends_with: String
  traitKey_not_ends_with_nocase: String
  newValue: String
  newValue_not: String
  newValue_gt: String
  newValue_lt: String
  newValue_gte: String
  newValue_lte: String
  newValue_in: [String!]
  newValue_not_in: [String!]
  newValue_contains: String
  newValue_contains_nocase: String
  newValue_not_contains: String
  newValue_not_contains_nocase: String
  newValue_starts_with: String
  newValue_starts_with_nocase: String
  newValue_not_starts_with: String
  newValue_not_starts_with_nocase: String
  newValue_ends_with: String
  newValue_ends_with_nocase: String
  newValue_not_ends_with: String
  newValue_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitStringUpdate_filter]
  or: [TraitStringUpdate_filter]
}

enum TraitStringUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  traitKey
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

input TraitString_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TraitString_filter]
  or: [TraitString_filter]
}

enum TraitString_orderBy {
  id
  key
  displayName
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  value
}

enum TraitType {
  string
  decimal
  boolean
  epochSeconds
}

type Transfer {
  id: Bytes!
  operator: Bytes!
  from: User
  to: User
  token: Token!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Transfer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  operator: Bytes
  operator_not: Bytes
  operator_gt: Bytes
  operator_lt: Bytes
  operator_gte: Bytes
  operator_lte: Bytes
  operator_in: [Bytes!]
  operator_not_in: [Bytes!]
  operator_contains: Bytes
  operator_not_contains: Bytes
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  operator
  from
  from__id
  from__address
  from__tokenCount
  to
  to__id
  to__address
  to__tokenCount
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  value
  blockNumber
  blockTimestamp
  transactionHash
}

type User {
  id: Bytes!
  address: Bytes!
  tokenCount: BigInt!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Balance_orderBy, orderDirection: OrderDirection, where: Balance_filter): [Balance!]
  created(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  obligationReceipts(skip: Int = 0, first: Int = 100, orderBy: ObligationReceipt_orderBy, orderDirection: OrderDirection, where: ObligationReceipt_filter): [ObligationReceipt!]
  promissoryNotes(skip: Int = 0, first: Int = 100, orderBy: PromissoryNote_orderBy, orderDirection: OrderDirection, where: PromissoryNote_filter): [PromissoryNote!]
  lending(skip: Int = 0, first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, where: Loan_filter): [Loan!]
  borrowing(skip: Int = 0, first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, where: Loan_filter): [Loan!]
}

input User_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  tokens_: Balance_filter
  created_: Token_filter
  obligationReceipts_: ObligationReceipt_filter
  promissoryNotes_: PromissoryNote_filter
  lending_: Loan_filter
  borrowing_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  tokenCount
  tokens
  created
  obligationReceipts
  promissoryNotes
  lending
  borrowing
}

enum ValidateOnSale {
  none
  requireEq
  requireUintGte
  requireUintLte
}

type ValidatorUpdate {
  id: Bytes!
  token: Token!
  newValue: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ValidatorUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  newValue: Bytes
  newValue_not: Bytes
  newValue_gt: Bytes
  newValue_lt: Bytes
  newValue_gte: Bytes
  newValue_lte: Bytes
  newValue_in: [Bytes!]
  newValue_not_in: [Bytes!]
  newValue_contains: Bytes
  newValue_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ValidatorUpdate_filter]
  or: [ValidatorUpdate_filter]
}

enum ValidatorUpdate_orderBy {
  id
  token
  token__id
  token__mintTimestamp
  token__configuration
  token__supply
  token__definition
  token__operatingAgreement
  token__tokenId
  token__uri
  token__validator
  newValue
  blockNumber
  blockTimestamp
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Auction {
  id: Bytes!
  liquidation: Liquidation!
  collateralToken: CollateralToken
  currencyToken: CurrencyToken!
  collateralTokenId: BigInt!
  quantity: BigInt!
  highestBid: Bid
  bidsCount: Int!
  endTime: BigInt!
  bids(skip: Int = 0, first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, where: Bid_filter): [Bid!]!
  status: AuctionStatus
}

enum AuctionStatus {
  Created
  Started
  Ended
}

input Auction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  liquidation: String
  liquidation_not: String
  liquidation_gt: String
  liquidation_lt: String
  liquidation_gte: String
  liquidation_lte: String
  liquidation_in: [String!]
  liquidation_not_in: [String!]
  liquidation_contains: String
  liquidation_contains_nocase: String
  liquidation_not_contains: String
  liquidation_not_contains_nocase: String
  liquidation_starts_with: String
  liquidation_starts_with_nocase: String
  liquidation_not_starts_with: String
  liquidation_not_starts_with_nocase: String
  liquidation_ends_with: String
  liquidation_ends_with_nocase: String
  liquidation_not_ends_with: String
  liquidation_not_ends_with_nocase: String
  liquidation_: Liquidation_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  collateralTokenId: BigInt
  collateralTokenId_not: BigInt
  collateralTokenId_gt: BigInt
  collateralTokenId_lt: BigInt
  collateralTokenId_gte: BigInt
  collateralTokenId_lte: BigInt
  collateralTokenId_in: [BigInt!]
  collateralTokenId_not_in: [BigInt!]
  quantity: BigInt
  quantity_not: BigInt
  quantity_gt: BigInt
  quantity_lt: BigInt
  quantity_gte: BigInt
  quantity_lte: BigInt
  quantity_in: [BigInt!]
  quantity_not_in: [BigInt!]
  highestBid: String
  highestBid_not: String
  highestBid_gt: String
  highestBid_lt: String
  highestBid_gte: String
  highestBid_lte: String
  highestBid_in: [String!]
  highestBid_not_in: [String!]
  highestBid_contains: String
  highestBid_contains_nocase: String
  highestBid_not_contains: String
  highestBid_not_contains_nocase: String
  highestBid_starts_with: String
  highestBid_starts_with_nocase: String
  highestBid_not_starts_with: String
  highestBid_not_starts_with_nocase: String
  highestBid_ends_with: String
  highestBid_ends_with_nocase: String
  highestBid_not_ends_with: String
  highestBid_not_ends_with_nocase: String
  highestBid_: Bid_filter
  bidsCount: Int
  bidsCount_not: Int
  bidsCount_gt: Int
  bidsCount_lt: Int
  bidsCount_gte: Int
  bidsCount_lte: Int
  bidsCount_in: [Int!]
  bidsCount_not_in: [Int!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  bids_: Bid_filter
  status: AuctionStatus
  status_not: AuctionStatus
  status_in: [AuctionStatus!]
  status_not_in: [AuctionStatus!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Auction_filter]
  or: [Auction_filter]
}

enum Auction_orderBy {
  id
  liquidation
  liquidation__id
  liquidation__source
  liquidation__sourceImplementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  currencyToken__decimals
  collateralTokenId
  quantity
  highestBid
  highestBid__id
  highestBid__bidder
  highestBid__amount
  highestBid__isHighest
  highestBid__timestamp
  highestBid__transactionHash
  bidsCount
  endTime
  bids
  status
}

type Batch {
  id: ID!
  owner: Bytes!
  collateralWrapperContext: Bytes!
  underlyingCollateralTokenAddress: Bytes!
  underlyingCollateralTokenIds: [BigInt!]!
}

input Batch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  underlyingCollateralTokenAddress: Bytes
  underlyingCollateralTokenAddress_not: Bytes
  underlyingCollateralTokenAddress_gt: Bytes
  underlyingCollateralTokenAddress_lt: Bytes
  underlyingCollateralTokenAddress_gte: Bytes
  underlyingCollateralTokenAddress_lte: Bytes
  underlyingCollateralTokenAddress_in: [Bytes!]
  underlyingCollateralTokenAddress_not_in: [Bytes!]
  underlyingCollateralTokenAddress_contains: Bytes
  underlyingCollateralTokenAddress_not_contains: Bytes
  underlyingCollateralTokenIds: [BigInt!]
  underlyingCollateralTokenIds_not: [BigInt!]
  underlyingCollateralTokenIds_contains: [BigInt!]
  underlyingCollateralTokenIds_contains_nocase: [BigInt!]
  underlyingCollateralTokenIds_not_contains: [BigInt!]
  underlyingCollateralTokenIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Batch_filter]
  or: [Batch_filter]
}

enum Batch_orderBy {
  id
  owner
  collateralWrapperContext
  underlyingCollateralTokenAddress
  underlyingCollateralTokenIds
}

type Bid {
  id: Bytes!
  auction: Auction!
  bidder: Bytes!
  amount: BigInt!
  isHighest: Boolean!
  timestamp: BigInt!
  transactionHash: Bytes!
}

input Bid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  bidder: Bytes
  bidder_not: Bytes
  bidder_gt: Bytes
  bidder_lt: Bytes
  bidder_gte: Bytes
  bidder_lte: Bytes
  bidder_in: [Bytes!]
  bidder_not_in: [Bytes!]
  bidder_contains: Bytes
  bidder_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  isHighest: Boolean
  isHighest_not: Boolean
  isHighest_in: [Boolean!]
  isHighest_not_in: [Boolean!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bid_filter]
  or: [Bid_filter]
}

enum Bid_orderBy {
  id
  auction
  auction__id
  auction__collateralTokenId
  auction__quantity
  auction__bidsCount
  auction__endTime
  auction__status
  bidder
  amount
  isHighest
  timestamp
  transactionHash
}

type Bundle {
  id: ID!
  owner: Bytes!
  collateralWrapperContext: Bytes!
  underlyingCollateralTokenAddress: Bytes!
  underlyingCollateralTokenIds: [BigInt!]!
}

input Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  underlyingCollateralTokenAddress: Bytes
  underlyingCollateralTokenAddress_not: Bytes
  underlyingCollateralTokenAddress_gt: Bytes
  underlyingCollateralTokenAddress_lt: Bytes
  underlyingCollateralTokenAddress_gte: Bytes
  underlyingCollateralTokenAddress_lte: Bytes
  underlyingCollateralTokenAddress_in: [Bytes!]
  underlyingCollateralTokenAddress_not_in: [Bytes!]
  underlyingCollateralTokenAddress_contains: Bytes
  underlyingCollateralTokenAddress_not_contains: Bytes
  underlyingCollateralTokenIds: [BigInt!]
  underlyingCollateralTokenIds_not: [BigInt!]
  underlyingCollateralTokenIds_contains: [BigInt!]
  underlyingCollateralTokenIds_contains_nocase: [BigInt!]
  underlyingCollateralTokenIds_not_contains: [BigInt!]
  underlyingCollateralTokenIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bundle_filter]
  or: [Bundle_filter]
}

enum Bundle_orderBy {
  id
  owner
  collateralWrapperContext
  underlyingCollateralTokenAddress
  underlyingCollateralTokenIds
}

type CollateralLiquidated {
  id: Bytes!
  loan: Loan!
  proceeds: BigInt!
}

input CollateralLiquidated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  proceeds: BigInt
  proceeds_not: BigInt
  proceeds_gt: BigInt
  proceeds_lt: BigInt
  proceeds_gte: BigInt
  proceeds_lte: BigInt
  proceeds_in: [BigInt!]
  proceeds_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollateralLiquidated_filter]
  or: [CollateralLiquidated_filter]
}

enum CollateralLiquidated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__completionTransactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__delegateV2
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__adminFee
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
  proceeds
}

type CollateralToken {
  id: Bytes!
  name: String!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
}

input CollateralToken_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  pools_: Pool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollateralToken_filter]
  or: [CollateralToken_filter]
}

enum CollateralToken_orderBy {
  id
  name
  pools
}

type CurrencyToken {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
}

input CurrencyToken_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  pools_: Pool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrencyToken_filter]
  or: [CurrencyToken_filter]
}

enum CurrencyToken_orderBy {
  id
  name
  symbol
  decimals
  pools
}

type Deposit {
  id: Bytes!
  pool: Pool!
  tick: Tick!
  account: Bytes!
  shares: BigInt!
  depositedAmount: BigInt!
  updatedAt: BigInt!
  createdAt: BigInt!
  redemptions(skip: Int = 0, first: Int = 100, orderBy: Redemption_orderBy, orderDirection: OrderDirection, where: Redemption_filter): [Redemption!]!
}

input Deposit_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_not: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_lt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  redemptions_: Redemption_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__adminFeeShareRecipient
  pool__adminFeeShareSplit
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__externalPriceOracle
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  account
  shares
  depositedAmount
  updatedAt
  createdAt
  redemptions
}

type Deposited {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  amount: BigInt!
  shares: BigInt!
}

input Deposited_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposited_filter]
  or: [Deposited_filter]
}

enum Deposited_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  amount
  shares
}

type Liquidation {
  id: Bytes!
  source: Bytes!
  sourceImplementation: Bytes!
  collateralToken: CollateralToken!
  currencyToken: CurrencyToken!
  loan: Loan!
  auctions(skip: Int = 0, first: Int = 100, orderBy: Auction_orderBy, orderDirection: OrderDirection, where: Auction_filter): [Auction!]!
}

input Liquidation_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  source: Bytes
  source_not: Bytes
  source_gt: Bytes
  source_lt: Bytes
  source_gte: Bytes
  source_lte: Bytes
  source_in: [Bytes!]
  source_not_in: [Bytes!]
  source_contains: Bytes
  source_not_contains: Bytes
  sourceImplementation: Bytes
  sourceImplementation_not: Bytes
  sourceImplementation_gt: Bytes
  sourceImplementation_lt: Bytes
  sourceImplementation_gte: Bytes
  sourceImplementation_lte: Bytes
  sourceImplementation_in: [Bytes!]
  sourceImplementation_not_in: [Bytes!]
  sourceImplementation_contains: Bytes
  sourceImplementation_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  auctions_: Auction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Liquidation_filter]
  or: [Liquidation_filter]
}

enum Liquidation_orderBy {
  id
  source
  sourceImplementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  currencyToken__decimals
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__completionTransactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__delegateV2
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__adminFee
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
  auctions
}

type LoanLiquidated {
  id: Bytes!
  loan: Loan!
}

input LoanLiquidated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanLiquidated_filter]
  or: [LoanLiquidated_filter]
}

enum LoanLiquidated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__completionTransactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__delegateV2
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__adminFee
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

type LoanOriginated {
  id: Bytes!
  loan: Loan!
}

input LoanOriginated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanOriginated_filter]
  or: [LoanOriginated_filter]
}

enum LoanOriginated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__completionTransactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__delegateV2
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__adminFee
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

type LoanRepaid {
  id: Bytes!
  loan: Loan!
}

input LoanRepaid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanRepaid_filter]
  or: [LoanRepaid_filter]
}

enum LoanRepaid_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__completionTransactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__delegateV2
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__adminFee
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

type Pool {
  id: Bytes!
  implementationVersionMajor: String!
  implementation: Bytes!
  collateralToken: CollateralToken!
  currencyToken: CurrencyToken!
  collateralWrappers: [Bytes!]!
  durations: [BigInt!]!
  rates: [BigInt!]!
  adminFeeRate: BigInt!
  adminFeeShareRecipient: Bytes!
  adminFeeShareSplit: Int!
  collateralLiquidator: Bytes!
  delegationRegistry: Bytes!
  externalPriceOracle: Bytes
  tokenIdRange: [BigInt!]
  tokenIdSet: [BigInt!]
  tokenIdMerkleRoot: Bytes
  tokenIdMerkleMetadataURI: String
  maxBorrows: [BigInt!]!
  adminFeeBalance: BigInt!
  ticks(skip: Int = 0, first: Int = 100, orderBy: Tick_orderBy, orderDirection: OrderDirection, where: Tick_filter): [Tick!]!
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  loans(skip: Int = 0, first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, where: Loan_filter): [Loan!]!
  events(skip: Int = 0, first: Int = 100, orderBy: PoolEvent_orderBy, orderDirection: OrderDirection, where: PoolEvent_filter): [PoolEvent!]!
  totalValueLocked: BigInt!
  totalValueAvailable: BigInt!
  totalValueUsed: BigInt!
  loansOriginated: BigInt!
  loansActive: BigInt!
  loansRepaid: BigInt!
  loansLiquidated: BigInt!
  loansCollateralLiquidated: BigInt!
  dayData(skip: Int = 0, first: Int = 100, orderBy: PoolDayData_orderBy, orderDirection: OrderDirection, where: PoolDayData_filter): [PoolDayData!]!
}

type PoolDayData {
  id: Bytes!
  timestamp: BigInt!
  pool: Pool!
  totalValueLocked: BigInt!
  totalValueAvailable: BigInt!
  totalValueUsed: BigInt!
}

input PoolDayData_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  totalValueLocked: BigInt
  totalValueLocked_not: BigInt
  totalValueLocked_gt: BigInt
  totalValueLocked_lt: BigInt
  totalValueLocked_gte: BigInt
  totalValueLocked_lte: BigInt
  totalValueLocked_in: [BigInt!]
  totalValueLocked_not_in: [BigInt!]
  totalValueAvailable: BigInt
  totalValueAvailable_not: BigInt
  totalValueAvailable_gt: BigInt
  totalValueAvailable_lt: BigInt
  totalValueAvailable_gte: BigInt
  totalValueAvailable_lte: BigInt
  totalValueAvailable_in: [BigInt!]
  totalValueAvailable_not_in: [BigInt!]
  totalValueUsed: BigInt
  totalValueUsed_not: BigInt
  totalValueUsed_gt: BigInt
  totalValueUsed_lt: BigInt
  totalValueUsed_gte: BigInt
  totalValueUsed_lte: BigInt
  totalValueUsed_in: [BigInt!]
  totalValueUsed_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolDayData_filter]
  or: [PoolDayData_filter]
}

enum PoolDayData_orderBy {
  id
  timestamp
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__adminFeeShareRecipient
  pool__adminFeeShareSplit
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__externalPriceOracle
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  totalValueLocked
  totalValueAvailable
  totalValueUsed
}

type PoolEvent {
  id: Bytes!
  transactionHash: Bytes!
  timestamp: BigInt!
  from: Bytes!
  account: Bytes!
  type: PoolEventType!
  pool: Pool!
  deposit: Deposit
  loanOriginated: LoanOriginated
  loanRepaid: LoanRepaid
  loanLiquidated: LoanLiquidated
  collateralLiquidated: CollateralLiquidated
  deposited: Deposited
  redeemed: Redeemed
  withdrawn: Withdrawn
  tokenCreated: TokenCreated
  transferred: Transferred
}

enum PoolEventType {
  LoanOriginated
  LoanRepaid
  LoanLiquidated
  CollateralLiquidated
  Deposited
  Redeemed
  Withdrawn
  TokenCreated
  Transferred
}

input PoolEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  type: PoolEventType
  type_not: PoolEventType
  type_in: [PoolEventType!]
  type_not_in: [PoolEventType!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  deposit: String
  deposit_not: String
  deposit_gt: String
  deposit_lt: String
  deposit_gte: String
  deposit_lte: String
  deposit_in: [String!]
  deposit_not_in: [String!]
  deposit_contains: String
  deposit_contains_nocase: String
  deposit_not_contains: String
  deposit_not_contains_nocase: String
  deposit_starts_with: String
  deposit_starts_with_nocase: String
  deposit_not_starts_with: String
  deposit_not_starts_with_nocase: String
  deposit_ends_with: String
  deposit_ends_with_nocase: String
  deposit_not_ends_with: String
  deposit_not_ends_with_nocase: String
  deposit_: Deposit_filter
  loanOriginated: String
  loanOriginated_not: String
  loanOriginated_gt: String
  loanOriginated_lt: String
  loanOriginated_gte: String
  loanOriginated_lte: String
  loanOriginated_in: [String!]
  loanOriginated_not_in: [String!]
  loanOriginated_contains: String
  loanOriginated_contains_nocase: String
  loanOriginated_not_contains: String
  loanOriginated_not_contains_nocase: String
  loanOriginated_starts_with: String
  loanOriginated_starts_with_nocase: String
  loanOriginated_not_starts_with: String
  loanOriginated_not_starts_with_nocase: String
  loanOriginated_ends_with: String
  loanOriginated_ends_with_nocase: String
  loanOriginated_not_ends_with: String
  loanOriginated_not_ends_with_nocase: String
  loanOriginated_: LoanOriginated_filter
  loanRepaid: String
  loanRepaid_not: String
  loanRepaid_gt: String
  loanRepaid_lt: String
  loanRepaid_gte: String
  loanRepaid_lte: String
  loanRepaid_in: [String!]
  loanRepaid_not_in: [String!]
  loanRepaid_contains: String
  loanRepaid_contains_nocase: String
  loanRepaid_not_contains: String
  loanRepaid_not_contains_nocase: String
  loanRepaid_starts_with: String
  loanRepaid_starts_with_nocase: String
  loanRepaid_not_starts_with: String
  loanRepaid_not_starts_with_nocase: String
  loanRepaid_ends_with: String
  loanRepaid_ends_with_nocase: String
  loanRepaid_not_ends_with: String
  loanRepaid_not_ends_with_nocase: String
  loanRepaid_: LoanRepaid_filter
  loanLiquidated: String
  loanLiquidated_not: String
  loanLiquidated_gt: String
  loanLiquidated_lt: String
  loanLiquidated_gte: String
  loanLiquidated_lte: String
  loanLiquidated_in: [String!]
  loanLiquidated_not_in: [String!]
  loanLiquidated_contains: String
  loanLiquidated_contains_nocase: String
  loanLiquidated_not_contains: String
  loanLiquidated_not_contains_nocase: String
  loanLiquidated_starts_with: String
  loanLiquidated_starts_with_nocase: String
  loanLiquidated_not_starts_with: String
  loanLiquidated_not_starts_with_nocase: String
  loanLiquidated_ends_with: String
  loanLiquidated_ends_with_nocase: String
  loanLiquidated_not_ends_with: String
  loanLiquidated_not_ends_with_nocase: String
  loanLiquidated_: LoanLiquidated_filter
  collateralLiquidated: String
  collateralLiquidated_not: String
  collateralLiquidated_gt: String
  collateralLiquidated_lt: String
  collateralLiquidated_gte: String
  collateralLiquidated_lte: String
  collateralLiquidated_in: [String!]
  collateralLiquidated_not_in: [String!]
  collateralLiquidated_contains: String
  collateralLiquidated_contains_nocase: String
  collateralLiquidated_not_contains: String
  collateralLiquidated_not_contains_nocase: String
  collateralLiquidated_starts_with: String
  collateralLiquidated_starts_with_nocase: String
  collateralLiquidated_not_starts_with: String
  collateralLiquidated_not_starts_with_nocase: String
  collateralLiquidated_ends_with: String
  collateralLiquidated_ends_with_nocase: String
  collateralLiquidated_not_ends_with: String
  collateralLiquidated_not_ends_with_nocase: String
  collateralLiquidated_: CollateralLiquidated_filter
  deposited: String
  deposited_not: String
  deposited_gt: String
  deposited_lt: String
  deposited_gte: String
  deposited_lte: String
  deposited_in: [String!]
  deposited_not_in: [String!]
  deposited_contains: String
  deposited_contains_nocase: String
  deposited_not_contains: String
  deposited_not_contains_nocase: String
  deposited_starts_with: String
  deposited_starts_with_nocase: String
  deposited_not_starts_with: String
  deposited_not_starts_with_nocase: String
  deposited_ends_with: String
  deposited_ends_with_nocase: String
  deposited_not_ends_with: String
  deposited_not_ends_with_nocase: String
  deposited_: Deposited_filter
  redeemed: String
  redeemed_not: String
  redeemed_gt: String
  redeemed_lt: String
  redeemed_gte: String
  redeemed_lte: String
  redeemed_in: [String!]
  redeemed_not_in: [String!]
  redeemed_contains: String
  redeemed_contains_nocase: String
  redeemed_not_contains: String
  redeemed_not_contains_nocase: String
  redeemed_starts_with: String
  redeemed_starts_with_nocase: String
  redeemed_not_starts_with: String
  redeemed_not_starts_with_nocase: String
  redeemed_ends_with: String
  redeemed_ends_with_nocase: String
  redeemed_not_ends_with: String
  redeemed_not_ends_with_nocase: String
  redeemed_: Redeemed_filter
  withdrawn: String
  withdrawn_not: String
  withdrawn_gt: String
  withdrawn_lt: String
  withdrawn_gte: String
  withdrawn_lte: String
  withdrawn_in: [String!]
  withdrawn_not_in: [String!]
  withdrawn_contains: String
  withdrawn_contains_nocase: String
  withdrawn_not_contains: String
  withdrawn_not_contains_nocase: String
  withdrawn_starts_with: String
  withdrawn_starts_with_nocase: String
  withdrawn_not_starts_with: String
  withdrawn_not_starts_with_nocase: String
  withdrawn_ends_with: String
  withdrawn_ends_with_nocase: String
  withdrawn_not_ends_with: String
  withdrawn_not_ends_with_nocase: String
  withdrawn_: Withdrawn_filter
  tokenCreated: String
  tokenCreated_not: String
  tokenCreated_gt: String
  tokenCreated_lt: String
  tokenCreated_gte: String
  tokenCreated_lte: String
  tokenCreated_in: [String!]
  tokenCreated_not_in: [String!]
  tokenCreated_contains: String
  tokenCreated_contains_nocase: String
  tokenCreated_not_contains: String
  tokenCreated_not_contains_nocase: String
  tokenCreated_starts_with: String
  tokenCreated_starts_with_nocase: String
  tokenCreated_not_starts_with: String
  tokenCreated_not_starts_with_nocase: String
  tokenCreated_ends_with: String
  tokenCreated_ends_with_nocase: String
  tokenCreated_not_ends_with: String
  tokenCreated_not_ends_with_nocase: String
  tokenCreated_: TokenCreated_filter
  transferred: String
  transferred_not: String
  transferred_gt: String
  transferred_lt: String
  transferred_gte: String
  transferred_lte: String
  transferred_in: [String!]
  transferred_not_in: [String!]
  transferred_contains: String
  transferred_contains_nocase: String
  transferred_not_contains: String
  transferred_not_contains_nocase: String
  transferred_starts_with: String
  transferred_starts_with_nocase: String
  transferred_not_starts_with: String
  transferred_not_starts_with_nocase: String
  transferred_ends_with: String
  transferred_ends_with_nocase: String
  transferred_not_ends_with: String
  transferred_not_ends_with_nocase: String
  transferred_: Transferred_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolEvent_filter]
  or: [PoolEvent_filter]
}

enum PoolEvent_orderBy {
  id
  transactionHash
  timestamp
  from
  account
  type
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__adminFeeShareRecipient
  pool__adminFeeShareSplit
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__externalPriceOracle
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  deposit
  deposit__id
  deposit__account
  deposit__shares
  deposit__depositedAmount
  deposit__updatedAt
  deposit__createdAt
  loanOriginated
  loanOriginated__id
  loanRepaid
  loanRepaid__id
  loanLiquidated
  loanLiquidated__id
  collateralLiquidated
  collateralLiquidated__id
  collateralLiquidated__proceeds
  deposited
  deposited__id
  deposited__account
  deposited__amount
  deposited__shares
  redeemed
  redeemed__id
  redeemed__account
  redeemed__shares
  redeemed__estimatedAmount
  withdrawn
  withdrawn__id
  withdrawn__account
  withdrawn__shares
  withdrawn__amount
  tokenCreated
  tokenCreated__id
  transferred
  transferred__id
  transferred__shares
  transferred__estimatedAmount
  transferred__from
  transferred__to
}

input Pool_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  implementationVersionMajor: String
  implementationVersionMajor_not: String
  implementationVersionMajor_gt: String
  implementationVersionMajor_lt: String
  implementationVersionMajor_gte: String
  implementationVersionMajor_lte: String
  implementationVersionMajor_in: [String!]
  implementationVersionMajor_not_in: [String!]
  implementationVersionMajor_contains: String
  implementationVersionMajor_contains_nocase: String
  implementationVersionMajor_not_contains: String
  implementationVersionMajor_not_contains_nocase: String
  implementationVersionMajor_starts_with: String
  implementationVersionMajor_starts_with_nocase: String
  implementationVersionMajor_not_starts_with: String
  implementationVersionMajor_not_starts_with_nocase: String
  implementationVersionMajor_ends_with: String
  implementationVersionMajor_ends_with_nocase: String
  implementationVersionMajor_not_ends_with: String
  implementationVersionMajor_not_ends_with_nocase: String
  implementation: Bytes
  implementation_not: Bytes
  implementation_gt: Bytes
  implementation_lt: Bytes
  implementation_gte: Bytes
  implementation_lte: Bytes
  implementation_in: [Bytes!]
  implementation_not_in: [Bytes!]
  implementation_contains: Bytes
  implementation_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  collateralWrappers: [Bytes!]
  collateralWrappers_not: [Bytes!]
  collateralWrappers_contains: [Bytes!]
  collateralWrappers_contains_nocase: [Bytes!]
  collateralWrappers_not_contains: [Bytes!]
  collateralWrappers_not_contains_nocase: [Bytes!]
  durations: [BigInt!]
  durations_not: [BigInt!]
  durations_contains: [BigInt!]
  durations_contains_nocase: [BigInt!]
  durations_not_contains: [BigInt!]
  durations_not_contains_nocase: [BigInt!]
  rates: [BigInt!]
  rates_not: [BigInt!]
  rates_contains: [BigInt!]
  rates_contains_nocase: [BigInt!]
  rates_not_contains: [BigInt!]
  rates_not_contains_nocase: [BigInt!]
  adminFeeRate: BigInt
  adminFeeRate_not: BigInt
  adminFeeRate_gt: BigInt
  adminFeeRate_lt: BigInt
  adminFeeRate_gte: BigInt
  adminFeeRate_lte: BigInt
  adminFeeRate_in: [BigInt!]
  adminFeeRate_not_in: [BigInt!]
  adminFeeShareRecipient: Bytes
  adminFeeShareRecipient_not: Bytes
  adminFeeShareRecipient_gt: Bytes
  adminFeeShareRecipient_lt: Bytes
  adminFeeShareRecipient_gte: Bytes
  adminFeeShareRecipient_lte: Bytes
  adminFeeShareRecipient_in: [Bytes!]
  adminFeeShareRecipient_not_in: [Bytes!]
  adminFeeShareRecipient_contains: Bytes
  adminFeeShareRecipient_not_contains: Bytes
  adminFeeShareSplit: Int
  adminFeeShareSplit_not: Int
  adminFeeShareSplit_gt: Int
  adminFeeShareSplit_lt: Int
  adminFeeShareSplit_gte: Int
  adminFeeShareSplit_lte: Int
  adminFeeShareSplit_in: [Int!]
  adminFeeShareSplit_not_in: [Int!]
  collateralLiquidator: Bytes
  collateralLiquidator_not: Bytes
  collateralLiquidator_gt: Bytes
  collateralLiquidator_lt: Bytes
  collateralLiquidator_gte: Bytes
  collateralLiquidator_lte: Bytes
  collateralLiquidator_in: [Bytes!]
  collateralLiquidator_not_in: [Bytes!]
  collateralLiquidator_contains: Bytes
  collateralLiquidator_not_contains: Bytes
  delegationRegistry: Bytes
  delegationRegistry_not: Bytes
  delegationRegistry_gt: Bytes
  delegationRegistry_lt: Bytes
  delegationRegistry_gte: Bytes
  delegationRegistry_lte: Bytes
  delegationRegistry_in: [Bytes!]
  delegationRegistry_not_in: [Bytes!]
  delegationRegistry_contains: Bytes
  delegationRegistry_not_contains: Bytes
  externalPriceOracle: Bytes
  externalPriceOracle_not: Bytes
  externalPriceOracle_gt: Bytes
  externalPriceOracle_lt: Bytes
  externalPriceOracle_gte: Bytes
  externalPriceOracle_lte: Bytes
  externalPriceOracle_in: [Bytes!]
  externalPriceOracle_not_in: [Bytes!]
  externalPriceOracle_contains: Bytes
  externalPriceOracle_not_contains: Bytes
  tokenIdRange: [BigInt!]
  tokenIdRange_not: [BigInt!]
  tokenIdRange_contains: [BigInt!]
  tokenIdRange_contains_nocase: [BigInt!]
  tokenIdRange_not_contains: [BigInt!]
  tokenIdRange_not_contains_nocase: [BigInt!]
  tokenIdSet: [BigInt!]
  tokenIdSet_not: [BigInt!]
  tokenIdSet_contains: [BigInt!]
  tokenIdSet_contains_nocase: [BigInt!]
  tokenIdSet_not_contains: [BigInt!]
  tokenIdSet_not_contains_nocase: [BigInt!]
  tokenIdMerkleRoot: Bytes
  tokenIdMerkleRoot_not: Bytes
  tokenIdMerkleRoot_gt: Bytes
  tokenIdMerkleRoot_lt: Bytes
  tokenIdMerkleRoot_gte: Bytes
  tokenIdMerkleRoot_lte: Bytes
  tokenIdMerkleRoot_in: [Bytes!]
  tokenIdMerkleRoot_not_in: [Bytes!]
  tokenIdMerkleRoot_contains: Bytes
  tokenIdMerkleRoot_not_contains: Bytes
  tokenIdMerkleMetadataURI: String
  tokenIdMerkleMetadataURI_not: String
  tokenIdMerkleMetadataURI_gt: String
  tokenIdMerkleMetadataURI_lt: String
  tokenIdMerkleMetadataURI_gte: String
  tokenIdMerkleMetadataURI_lte: String
  tokenIdMerkleMetadataURI_in: [String!]
  tokenIdMerkleMetadataURI_not_in: [String!]
  tokenIdMerkleMetadataURI_contains: String
  tokenIdMerkleMetadataURI_contains_nocase: String
  tokenIdMerkleMetadataURI_not_contains: String
  tokenIdMerkleMetadataURI_not_contains_nocase: String
  tokenIdMerkleMetadataURI_starts_with: String
  tokenIdMerkleMetadataURI_starts_with_nocase: String
  tokenIdMerkleMetadataURI_not_starts_with: String
  tokenIdMerkleMetadataURI_not_starts_with_nocase: String
  tokenIdMerkleMetadataURI_ends_with: String
  tokenIdMerkleMetadataURI_ends_with_nocase: String
  tokenIdMerkleMetadataURI_not_ends_with: String
  tokenIdMerkleMetadataURI_not_ends_with_nocase: String
  maxBorrows: [BigInt!]
  maxBorrows_not: [BigInt!]
  maxBorrows_contains: [BigInt!]
  maxBorrows_contains_nocase: [BigInt!]
  maxBorrows_not_contains: [BigInt!]
  maxBorrows_not_contains_nocase: [BigInt!]
  adminFeeBalance: BigInt
  adminFeeBalance_not: BigInt
  adminFeeBalance_gt: BigInt
  adminFeeBalance_lt: BigInt
  adminFeeBalance_gte: BigInt
  adminFeeBalance_lte: BigInt
  adminFeeBalance_in: [BigInt!]
  adminFeeBalance_not_in: [BigInt!]
  ticks_: Tick_filter
  deposits_: Deposit_filter
  loans_: Loan_filter
  events_: PoolEvent_filter
  totalValueLocked: BigInt
  totalValueLocked_not: BigInt
  totalValueLocked_gt: BigInt
  totalValueLocked_lt: BigInt
  totalValueLocked_gte: BigInt
  totalValueLocked_lte: BigInt
  totalValueLocked_in: [BigInt!]
  totalValueLocked_not_in: [BigInt!]
  totalValueAvailable: BigInt
  totalValueAvailable_not: BigInt
  totalValueAvailable_gt: BigInt
  totalValueAvailable_lt: BigInt
  totalValueAvailable_gte: BigInt
  totalValueAvailable_lte: BigInt
  totalValueAvailable_in: [BigInt!]
  totalValueAvailable_not_in: [BigInt!]
  totalValueUsed: BigInt
  totalValueUsed_not: BigInt
  totalValueUsed_gt: BigInt
  totalValueUsed_lt: BigInt
  totalValueUsed_gte: BigInt
  totalValueUsed_lte: BigInt
  totalValueUsed_in: [BigInt!]
  totalValueUsed_not_in: [BigInt!]
  loansOriginated: BigInt
  loansOriginated_not: BigInt
  loansOriginated_gt: BigInt
  loansOriginated_lt: BigInt
  loansOriginated_gte: BigInt
  loansOriginated_lte: BigInt
  loansOriginated_in: [BigInt!]
  loansOriginated_not_in: [BigInt!]
  loansActive: BigInt
  loansActive_not: BigInt
  loansActive_gt: BigInt
  loansActive_lt: BigInt
  loansActive_gte: BigInt
  loansActive_lte: BigInt
  loansActive_in: [BigInt!]
  loansActive_not_in: [BigInt!]
  loansRepaid: BigInt
  loansRepaid_not: BigInt
  loansRepaid_gt: BigInt
  loansRepaid_lt: BigInt
  loansRepaid_gte: BigInt
  loansRepaid_lte: BigInt
  loansRepaid_in: [BigInt!]
  loansRepaid_not_in: [BigInt!]
  loansLiquidated: BigInt
  loansLiquidated_not: BigInt
  loansLiquidated_gt: BigInt
  loansLiquidated_lt: BigInt
  loansLiquidated_gte: BigInt
  loansLiquidated_lte: BigInt
  loansLiquidated_in: [BigInt!]
  loansLiquidated_not_in: [BigInt!]
  loansCollateralLiquidated: BigInt
  loansCollateralLiquidated_not: BigInt
  loansCollateralLiquidated_gt: BigInt
  loansCollateralLiquidated_lt: BigInt
  loansCollateralLiquidated_gte: BigInt
  loansCollateralLiquidated_lte: BigInt
  loansCollateralLiquidated_in: [BigInt!]
  loansCollateralLiquidated_not_in: [BigInt!]
  dayData_: PoolDayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  implementationVersionMajor
  implementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  currencyToken__decimals
  collateralWrappers
  durations
  rates
  adminFeeRate
  adminFeeShareRecipient
  adminFeeShareSplit
  collateralLiquidator
  delegationRegistry
  externalPriceOracle
  tokenIdRange
  tokenIdSet
  tokenIdMerkleRoot
  tokenIdMerkleMetadataURI
  maxBorrows
  adminFeeBalance
  ticks
  deposits
  loans
  events
  totalValueLocked
  totalValueAvailable
  totalValueUsed
  loansOriginated
  loansActive
  loansRepaid
  loansLiquidated
  loansCollateralLiquidated
  dayData
}

type Redeemed {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  shares: BigInt!
  estimatedAmount: BigInt!
}

input Redeemed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  estimatedAmount: BigInt
  estimatedAmount_not: BigInt
  estimatedAmount_gt: BigInt
  estimatedAmount_lt: BigInt
  estimatedAmount_gte: BigInt
  estimatedAmount_lte: BigInt
  estimatedAmount_in: [BigInt!]
  estimatedAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Redeemed_filter]
  or: [Redeemed_filter]
}

enum Redeemed_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  shares
  estimatedAmount
}

type Redemption {
  id: Bytes!
  redemptionId: BigInt!
  deposit: Deposit!
  shares: BigInt!
}

input Redemption_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  redemptionId: BigInt
  redemptionId_not: BigInt
  redemptionId_gt: BigInt
  redemptionId_lt: BigInt
  redemptionId_gte: BigInt
  redemptionId_lte: BigInt
  redemptionId_in: [BigInt!]
  redemptionId_not_in: [BigInt!]
  deposit: String
  deposit_not: String
  deposit_gt: String
  deposit_lt: String
  deposit_gte: String
  deposit_lte: String
  deposit_in: [String!]
  deposit_not_in: [String!]
  deposit_contains: String
  deposit_contains_nocase: String
  deposit_not_contains: String
  deposit_not_contains_nocase: String
  deposit_starts_with: String
  deposit_starts_with_nocase: String
  deposit_not_starts_with: String
  deposit_not_starts_with_nocase: String
  deposit_ends_with: String
  deposit_ends_with_nocase: String
  deposit_not_ends_with: String
  deposit_not_ends_with_nocase: String
  deposit_: Deposit_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Redemption_filter]
  or: [Redemption_filter]
}

enum Redemption_orderBy {
  id
  redemptionId
  deposit
  deposit__id
  deposit__account
  deposit__shares
  deposit__depositedAmount
  deposit__updatedAt
  deposit__createdAt
  shares
}

type Tick {
  id: Bytes!
  pool: Pool!
  raw: BigInt!
  limit: BigInt!
  duration: BigInt!
  rate: BigInt!
  durationIndex: Int!
  rateIndex: Int!
  limitType: Int!
  active: Boolean!
  value: BigInt!
  shares: BigInt!
  available: BigInt!
  pending: BigInt!
  redemptionPending: BigInt!
  prev: BigInt!
  next: BigInt!
  accrued: BigInt
  accrualRate: BigInt
  accrualTimestamp: BigInt
  principalWeightedDuration: BigInt!
  interestWeightedMaturity: BigInt!
  token: CurrencyToken
}

input Tick_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  raw: BigInt
  raw_not: BigInt
  raw_gt: BigInt
  raw_lt: BigInt
  raw_gte: BigInt
  raw_lte: BigInt
  raw_in: [BigInt!]
  raw_not_in: [BigInt!]
  limit: BigInt
  limit_not: BigInt
  limit_gt: BigInt
  limit_lt: BigInt
  limit_gte: BigInt
  limit_lte: BigInt
  limit_in: [BigInt!]
  limit_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  rate: BigInt
  rate_not: BigInt
  rate_gt: BigInt
  rate_lt: BigInt
  rate_gte: BigInt
  rate_lte: BigInt
  rate_in: [BigInt!]
  rate_not_in: [BigInt!]
  durationIndex: Int
  durationIndex_not: Int
  durationIndex_gt: Int
  durationIndex_lt: Int
  durationIndex_gte: Int
  durationIndex_lte: Int
  durationIndex_in: [Int!]
  durationIndex_not_in: [Int!]
  rateIndex: Int
  rateIndex_not: Int
  rateIndex_gt: Int
  rateIndex_lt: Int
  rateIndex_gte: Int
  rateIndex_lte: Int
  rateIndex_in: [Int!]
  rateIndex_not_in: [Int!]
  limitType: Int
  limitType_not: Int
  limitType_gt: Int
  limitType_lt: Int
  limitType_gte: Int
  limitType_lte: Int
  limitType_in: [Int!]
  limitType_not_in: [Int!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  available: BigInt
  available_not: BigInt
  available_gt: BigInt
  available_lt: BigInt
  available_gte: BigInt
  available_lte: BigInt
  available_in: [BigInt!]
  available_not_in: [BigInt!]
  pending: BigInt
  pending_not: BigInt
  pending_gt: BigInt
  pending_lt: BigInt
  pending_gte: BigInt
  pending_lte: BigInt
  pending_in: [BigInt!]
  pending_not_in: [BigInt!]
  redemptionPending: BigInt
  redemptionPending_not: BigInt
  redemptionPending_gt: BigInt
  redemptionPending_lt: BigInt
  redemptionPending_gte: BigInt
  redemptionPending_lte: BigInt
  redemptionPending_in: [BigInt!]
  redemptionPending_not_in: [BigInt!]
  prev: BigInt
  prev_not: BigInt
  prev_gt: BigInt
  prev_lt: BigInt
  prev_gte: BigInt
  prev_lte: BigInt
  prev_in: [BigInt!]
  prev_not_in: [BigInt!]
  next: BigInt
  next_not: BigInt
  next_gt: BigInt
  next_lt: BigInt
  next_gte: BigInt
  next_lte: BigInt
  next_in: [BigInt!]
  next_not_in: [BigInt!]
  accrued: BigInt
  accrued_not: BigInt
  accrued_gt: BigInt
  accrued_lt: BigInt
  accrued_gte: BigInt
  accrued_lte: BigInt
  accrued_in: [BigInt!]
  accrued_not_in: [BigInt!]
  accrualRate: BigInt
  accrualRate_not: BigInt
  accrualRate_gt: BigInt
  accrualRate_lt: BigInt
  accrualRate_gte: BigInt
  accrualRate_lte: BigInt
  accrualRate_in: [BigInt!]
  accrualRate_not_in: [BigInt!]
  accrualTimestamp: BigInt
  accrualTimestamp_not: BigInt
  accrualTimestamp_gt: BigInt
  accrualTimestamp_lt: BigInt
  accrualTimestamp_gte: BigInt
  accrualTimestamp_lte: BigInt
  accrualTimestamp_in: [BigInt!]
  accrualTimestamp_not_in: [BigInt!]
  principalWeightedDuration: BigInt
  principalWeightedDuration_not: BigInt
  principalWeightedDuration_gt: BigInt
  principalWeightedDuration_lt: BigInt
  principalWeightedDuration_gte: BigInt
  principalWeightedDuration_lte: BigInt
  principalWeightedDuration_in: [BigInt!]
  principalWeightedDuration_not_in: [BigInt!]
  interestWeightedMaturity: BigInt
  interestWeightedMaturity_not: BigInt
  interestWeightedMaturity_gt: BigInt
  interestWeightedMaturity_lt: BigInt
  interestWeightedMaturity_gte: BigInt
  interestWeightedMaturity_lte: BigInt
  interestWeightedMaturity_in: [BigInt!]
  interestWeightedMaturity_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CurrencyToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tick_filter]
  or: [Tick_filter]
}

enum Tick_orderBy {
  id
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__adminFeeShareRecipient
  pool__adminFeeShareSplit
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__externalPriceOracle
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  raw
  limit
  duration
  rate
  durationIndex
  rateIndex
  limitType
  active
  value
  shares
  available
  pending
  redemptionPending
  prev
  next
  accrued
  accrualRate
  accrualTimestamp
  principalWeightedDuration
  interestWeightedMaturity
  token
  token__id
  token__name
  token__symbol
  token__decimals
}

type TokenCreated {
  id: Bytes!
  tick: Tick!
  token: CurrencyToken!
}

input TokenCreated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CurrencyToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCreated_filter]
  or: [TokenCreated_filter]
}

enum TokenCreated_orderBy {
  id
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  token
  token__id
  token__name
  token__symbol
  token__decimals
}

type Transferred {
  id: Bytes!
  tick: Tick!
  token: CurrencyToken!
  shares: BigInt!
  estimatedAmount: BigInt!
  from: Bytes!
  to: Bytes!
}

input Transferred_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CurrencyToken_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  estimatedAmount: BigInt
  estimatedAmount_not: BigInt
  estimatedAmount_gt: BigInt
  estimatedAmount_lt: BigInt
  estimatedAmount_gte: BigInt
  estimatedAmount_lte: BigInt
  estimatedAmount_in: [BigInt!]
  estimatedAmount_not_in: [BigInt!]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transferred_filter]
  or: [Transferred_filter]
}

enum Transferred_orderBy {
  id
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  token
  token__id
  token__name
  token__symbol
  token__decimals
  shares
  estimatedAmount
  from
  to
}

type Withdrawn {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  shares: BigInt!
  amount: BigInt!
}

input Withdrawn_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Withdrawn_filter]
  or: [Withdrawn_filter]
}

enum Withdrawn_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__limitType
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  shares
  amount
}